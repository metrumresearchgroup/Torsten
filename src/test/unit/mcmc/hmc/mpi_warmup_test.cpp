#ifdef STAN_LANG_MPI

#include <gtest/gtest.h>
#include <stan/mcmc/hmc/mpi_cross_chain_adapter.hpp>
#include <stan/analyze/mcmc/compute_potential_scale_reduction.hpp>
#include <stan/math/torsten/mpi.hpp>
#include <stan/callbacks/stream_logger.hpp>
#include <stan/mcmc/hmc/nuts/adapt_unit_e_nuts.hpp>
#include <boost/random/additive_combine.hpp>
#include <stan/callbacks/writer.hpp>
#include <stan/services/util/mcmc_writer.hpp>
#include <stan/services/util/generate_transitions.hpp>
#include <stan/io/dump.hpp>
#include <fstream>

using Eigen::MatrixXd;
using Eigen::Matrix;
using std::vector;
using stan::math::mpi::Session;
using stan::math::mpi::Communicator;
using Eigen::MatrixXd;
using Eigen::VectorXd;
using boost::accumulators::accumulator_set;
using boost::accumulators::stats;
using boost::accumulators::tag::mean;
using boost::accumulators::tag::variance;

struct dummy_sampler {
  double stepsize;

  dummy_sampler(double step) : stepsize(step) {}

  double get_nominal_stepsize() {
    return stepsize;
  }

  void set_nominal_stepsize(double new_stepsize) {
    stepsize = new_stepsize;
  }
};

TEST(mpi_warmup_test, mpi_cross_chain_adapter) {
  stan::callbacks::stream_logger logger(std::cout, std::cout, std::cout,
                                        std::cerr, std::cerr);

  const int num_chains = 4;
  const int max_num_windows = 5;
  const int window_size = 50;
  std::vector<Eigen::VectorXd>
    draw_vecs(num_chains, Eigen::VectorXd(window_size * max_num_windows));
draw_vecs[0] <<  
-276.606, -277.168,  -272.621,  -271.142,  -271.95 ,
-269.749,  -267.016,  -273.508,  -268.65 ,  -265.904,
-264.629,  -260.797,  -263.184,  -263.892,  -268.81 ,
-272.563,  -268.32 ,  -266.297,  -265.787,  -266.073,
-265.788,  -262.26 ,  -265.073,  -265.511,  -264.318,
-264.318,  -266.261,  -265.633,  -265.323,  -265.633,
-265.426,  -265.69 ,  -266.122,  -264.876,  -264.829,
-264.238,  -265.822,  -262.979,  -264.012,  -263.801,
-264.745,  -263.94 ,  -263.586,  -263.284,  -262.566,
-261.816,  -265.308,  -266.467,  -265.915,  -266.122,
-266.122,  -265.903,  -265.903,  -265.717,  -271.78 ,
-271.78 ,  -271.712,  -271.712,  -271.011,  -273.137,
-272.125,  -265.535,  -265.168,  -267.824,  -262.983,
-262.985,  -261.967,  -265.455,  -265.9  ,  -265.623,
-262.111,  -262.111,  -262.111,  -266.586,  -266.545,
-266.545,  -263.267,  -268.256,  -270.425,  -268.454,
-268.807,  -269.154,  -269.154,  -269.528,  -268.206,
-271.774,  -269.453,  -267.725,  -266.435,  -269.434,
-267.838,  -267.676,  -267.925,  -268.343,  -267.824,
-267.824,  -267.05 ,  -268.138,  -268.072,  -267.321,
-267.529,  -267.481,  -267.118,  -267.872,  -269.605,
-269.974,  -269.347,  -269.806,  -273.444,  -272.257,
-269.983,  -271.206,  -271.453,  -268.328,  -268.185,
-268.817,  -266.788,  -264.052,  -270.256,  -269.739,
-271.512,  -266.883,  -266.736,  -266.872,  -267.525,
-266.845,  -267.412,  -267.754,  -267.754,  -267.625,
-266.819,  -266.978,  -267.949,  -266.816,  -267.641,
-268.377,  -267.13 ,  -266.892,  -269.544,  -270.316,
-270.461,  -270.989,  -273.724,  -273.155,  -272.725,
-272.082,  -264.071,  -265.269,  -263.945,  -261.799,
-261.854,  -264.487,  -267.127,  -265.134,  -264.052,
-269.239,  -263.838,  -264.494,  -261.844,  -264.41 ,
-261.969,  -264.178,  -265.37 ,  -266.054,  -264.703,
-266.988,  -267.21 ,  -265.177,  -263.338,  -266.309,
-272.157,  -269.383,  -266.892,  -266.822,  -268.786,
-271.036,  -266.955,  -267.356,  -270.616,  -265.706,
-264.444,  -263.224,  -263.313,  -265.252,  -263.874,
-265.89 ,  -260.837,  -262.717,  -262.073,  -264.779,
-264.05 ,  -265.203,  -262.597,  -261.822,  -264.143,
-268.655,  -269.055,  -270.736,  -265.17 ,  -265.217,
-269.879,  -270.83 ,  -271.194,  -269.754,  -263.825,
-263.737,  -265.485,  -264.626,  -264.713,  -265.561,
-266.183,  -262.944,  -263.938,  -263.534,  -263.802,
-262.138,  -262.138,  -261.331,  -261.777,  -261.62 ,
-263.027,  -263.062,  -262.453,  -263.18 ,  -264.445,
-266.134,  -265.103,  -264.626,  -264.427,  -265.528,
-263.938,  -263.587,  -263.358,  -264.897,  -265.179,
-264.573,  -270.805,  -270.824,  -268.878,  -268.878,
-269.638,  -269.536,  -276.973,  -274.614,  -277.589,
-273.321,  -273.301,  -271.049,  -273.554,  -269.292;

draw_vecs[1] <<  
-270.284,  -266.874,  -263.361,  -260.089,  -262.139,
-262.139,  -265.862,  -265.862,  -264.475,  -264.475,
-263.834,  -262.765,  -263.039,  -265.855,  -267.63 ,
-266.903,  -267.004,  -262.547,  -262.196,  -259.266,
-259.185,  -258.549,  -259.665,  -258.64 ,  -258.7  ,
-260.475,  -260.475,  -261.463,  -261.483,  -261.603,
-261.016,  -262.461,  -262.359,  -262.543,  -261.563,
-261.563,  -262.017,  -262.425,  -262.895,  -263.366,
-267.275,  -265.694,  -266.102,  -265.527,  -261.296,
-261.296,  -263.983,  -262.662,  -263.794,  -268.656,
-267.987,  -268.543,  -267.519,  -265.96 ,  -267.899,
-268.445,  -269.063,  -270.79 ,  -264.644,  -265.781,
-268.941,  -269.489,  -269.419,  -272.76 ,  -267.807,
-270.202,  -267.557,  -265.109,  -265.497,  -268.019,
-266.981,  -268.117,  -265.153,  -265.451,  -271.16 ,
-266.011,  -265.764,  -267.551,  -267.334,  -264.686,
-266.051,  -267.103,  -268.63 ,  -269.366,  -269.251,
-267.918,  -267.476,  -265.557,  -266.437,  -264.879,
-265.035,  -266.154,  -268.055,  -265.552,  -265.48 ,
-264.146,  -264.952,  -264.283,  -264.768,  -262.73 ,
-263.659,  -263.659,  -270.215,  -269.461,  -271.369,
-276.308,  -270.751,  -267.617,  -268.485,  -266.52 ,
-266.03 ,  -263.784,  -263.786,  -264.258,  -264.176,
-265.869,  -264.22 ,  -265.61 ,  -264.198,  -263.931,
-264.291,  -266.761,  -267.04 ,  -268.286,  -266.905,
-268.179,  -266.984,  -268.538,  -267.756,  -267.756,
-269.435,  -269.391,  -264.409,  -264.465,  -266.222,
-270.104,  -269.579,  -267.769,  -263.89 ,  -264.642,
-264.289,  -262.59 ,  -260.718,  -266.693,  -272.436,
-272.034,  -269.769,  -262.51 ,  -265.406,  -272.021,
-270.796,  -267.703,  -267.549,  -265.936,  -265.205,
-268.592,  -265.528,  -261.628,  -262.462,  -262.253,
-262.93 ,  -262.932,  -262.872,  -263.627,  -264.512,
-263.074,  -263.795,  -263.434,  -265.15 ,  -264.709,
-262.096,  -263.163,  -259.09 ,  -259.09 ,  -261.602,
-261.602,  -264.06 ,  -263.836,  -260.945,  -261.985,
-262.039,  -261.927,  -268.013,  -272.047,  -273.161,
-268.47 ,  -269.855,  -269.855,  -267.957,  -267.957,
-261.807,  -261.807,  -261.807,  -261.807,  -262.876,
-262.905,  -262.086,  -262.461,  -262.948,  -261.041,
-258.394,  -258.675,  -259.269,  -262.313,  -261.776,  -259
,  -257.015,  -258.733,  -259.681,  -261.881,  -263.303,
-263.303,  -264.105,  -263.857,  -264.845,  -265.121,
-265.121,  -265.121,  -265.121,  -264.857,  -263.811,
-263.796,  -263.796,  -265.803,  -263.442,  -263.442,
-262.237,  -262.237,  -262.237,  -261.879,  -262.177,
-264.667,  -265.174,  -265.174,  -264.707,  -264.707,
-264.535,  -265.637,  -261.316,  -261.456,  -262.575,
-265.12 ,  -263.7  ,  -263.7  ,  -263.7  ,  -263.7  ,
-264.145,  -268.846,  -261.643,  -261.561;

draw_vecs[2] <<  
-262.744,  -261.998,  -261.994,  -262.239,  -264.747,
-263.467,  -266.498,  -266.158,  -266.158,  -266.158,
-266.334,  -268.21 ,  -266.863,  -265.772,  -267.149,
-266.097,  -266.097,  -265.845,  -265.976,  -267.216,
-269.566,  -269.566,  -270.05 ,  -269.622,  -269.981,
-270.698,  -270.698,  -270.698,  -268.899,  -268.504,
-268.814,  -267.439,  -268.08 ,  -267.438,  -268.135,
-268.135,  -268.135,  -268.135,  -267.767,  -267.448,
-268.76 ,  -268.76 ,  -267.301,  -268.337,  -267.902,
-269.79 ,  -267.688,  -265.888,  -266.014,  -266.122,
-266.953,  -266.722,  -267.119,  -267.119,  -267.047,
-267.047,  -266.797,  -266.797,  -266.269,  -265.727,
-266.522,  -266.522,  -267.202,  -265.66 ,  -265.66 ,
-268.183,  -266.952,  -267.373,  -264.304,  -264.59 ,
-263.903,  -263.988,  -264.204,  -264.204,  -265.643,
-265.643,  -264.296,  -264.457,  -265.484,  -265.378,
-265.128,  -265.128,  -265.128,  -265.128,  -264.844,
-266.096,  -265.205,  -265.205,  -265.205,  -265.198,
-265.198,  -265.741,  -265.314,  -265.903,  -265.903,
-266.001,  -266.001,  -265.504,  -265.313,  -265.949,
-265.194,  -264.247,  -264.247,  -264.455,  -264.455,
-264.455,  -264.303,  -264.303,  -264.303,  -264.303,
-265.261,  -265.885,  -265.097,  -264.3  ,  -264.3  ,
-264.555,  -264.798,  -264.404,  -265.854,  -265.858,
-265.858,  -265.858,  -265.858,  -265.122,  -264.49 ,
-264.49 ,  -264.066,  -264.129,  -265.102,  -264.296,
-264.324,  -264.273,  -264.078,  -264.07 ,  -263.923,
-263.923,  -264.11 ,  -264.3  ,  -264.3  ,  -264.051,
-264.051,  -264.864,  -265.61 ,  -265.61 ,  -264.518,
-264.555,  -264.711,  -264.711,  -265.346,  -265.346,
-264.946,  -265.135,  -265.102,  -265.625,  -265.482,
-265.482,  -265.482,  -265.194,  -264.499,  -264.178,
-264.848,  -264.848,  -264.155,  -264.155,  -264.117,
-264.45 ,  -264.45 ,  -265.476,  -265.476,  -267.104,
-264.804,  -264.496,  -264.565,  -264.637,  -264.426,
-264.574,  -264.659,  -265.509,  -265.509,  -264.669,
-264.669,  -264.669,  -264.669,  -265.014,  -265.014,
-264.797,  -266.052,  -266.052,  -267.349,  -266.748,
-266.266,  -267.778,  -266.736,  -266.736,  -268.388,
-265.949,  -265.949,  -266.144,  -267.147,  -267.147,
-265.965,  -265.329,  -265.411,  -267.016,  -265.516,
-265.516,  -265.516,  -265.516,  -265.516,  -267.111,
-266.987,  -266.662,  -265.979,  -265.517,  -265.495,
-265.898,  -266.085,  -266.085,  -265.282,  -265.337,
-265.337,  -265.337,  -265.873,  -265.044,  -265.044,
-265.044,  -267.565,  -265.853,  -266.693,  -265.688,
-265.92 ,  -266.021,  -266.147,  -266.802,  -266.84 ,
-266.84 ,  -266.84 ,  -266.84 ,  -266.84 ,  -267.173,
-266.361,  -266.361,  -266.825,  -266.444,  -266.444,
-266.444,  -266.444,  -267.152,  -266.515,  -266.533;

draw_vecs[3] <<  
 -266.014,-265.791,  -265.791,  -266.053,  -266.196,
-265.953,  -265.787,  -265.787,  -266.336,  -266.658,
-267.189,  -267.232,  -270.645,  -270.645,  -270.645,
-270.645,  -272.083,  -269    ,  -266.46 ,  -266.786,
-267.246,  -266.353,  -266.782,  -266.782,  -266.823,
-266.781,  -266.781,  -266.781,  -266.781,  -266.718,
-266.562,  -266.837,  -268.308,  -267.161,  -267.081,
-267.889,  -267.103,  -267.103,  -265.488,  -265.73 ,
-265.73 ,  -266.46 ,  -266.46 ,  -267.288,  -265.69 ,
-265.69 ,  -265.69 ,  -266.302,  -266.107,  -266.107,
-266.107,  -266.107,  -266.107,  -264.795,  -264.659,
-265.365,  -266.233,  -265.995,  -265.995,  -266.013,
-266.025,  -265.512,  -265.512,  -265.512,  -265.512,
-265.605,  -265.605,  -265.605,  -265.571,  -265.916,
-265.325,  -266.295,  -265.598,  -266.856,  -266.856,
-266.19 ,  -266.19 ,  -265.077,  -265.249,  -265.43 ,
-265.43 ,  -265.429,  -265.481,  -265.408,  -265.408,
-265.991,  -265.595,  -266.051,  -266.051,  -266.525,
-267.047,  -265.283,  -265.167,  -265.223,  -265.223,
-265.526,  -265.158,  -265.11 ,  -265.11 ,  -265.24 ,
-265.293,  -265.45 ,  -265.45 ,  -265.109,  -265.863,
-265.112,  -265.112,  -265.112,  -265.112,  -265.112,
-264.967,  -264.967,  -266.176,  -265.038,  -265.238,
-265.238,  -265.238,  -265.531,  -265.531,  -265.461,
-265.882,  -265.882,  -265.301,  -265.301,  -266.118,
-266.254,  -264.316,  -264.316,  -264.316,  -265.241,
-264.463,  -264.658,  -265.323,  -264.331,  -264.331,
-266.603,  -264.131,  -264.131,  -264.289,  -264.289,
-265.96 ,  -264.685,  -264.731,  -265.294,  -264.663,
-264.831,  -264.288,  -265.753,  -265.753,  -265.925,
-265.925,  -268.329,  -266.288,  -266.288,  -266.288,
-266.288,  -264.796,  -264.573,  -265.464,  -264.95 ,
-264.966,  -264.602,  -264.602,  -265.338,  -265.549,
-265.575,  -267.306,  -266.802,  -266.268,  -265.888,
-265.746,  -265.746,  -265.746,  -266.17 ,  -266.134,
-265.365,  -265.365,  -265.484,  -266.118,  -265.285,
-265.285,  -265.285,  -265.285,  -265.285,  -266.041,
-266.041,  -267.61 ,  -267.557,  -267.557,  -266.593,
-266.132,  -265.76 ,  -265.757,  -265.793,  -265.793,
-265.793,  -265.598,  -265.354,  -267.131,  -265.039,
-265.039,  -265.039,  -265.039,  -265.039,  -265.869,
-265.869,  -266.309,  -265.897,  -265.727,  -265.958,
-267.231,  -266.862,  -267.255,  -267.545,  -267.009,
-265.8  ,  -265.551,  -266.254,  -265.394,  -264.825,
-264.825,  -265.245,  -265.245,  -264.312,  -264.365,
-264.253,  -264.514,  -264.413,  -264.413,  -264.413,
-264.413,  -264.413,  -264.589,  -265.277,  -265.378,
-265.69 ,  -265.69 ,  -264.972,  -264.972,  -264.972,
-264.972,  -265.283,  -265.237,  -264.671,  -264.88 ,
-265.099,  -266.919,  -265.878,  -264.653,  -264.653;

 const Communicator& comm = Session::inter_chain_comm(num_chains);

 const std::vector<const double* > draws{draw_vecs[0].data(),
     draw_vecs[1].data(), draw_vecs[2].data(), draw_vecs[3].data()};

 double chain_stepsize = 1.1 + 0.1 * comm.rank();

 const int num_iterations = window_size * max_num_windows;

 Eigen::VectorXd dummy;

  // a large ESS target should make all windows fail to pass tests
 {
   stan::mcmc::mpi_cross_chain_adapter<dummy_sampler> cc_adapter(num_iterations, window_size, num_chains, 1.1, 100);
   stan::mcmc::mpi_var_adaptation var_adapt(0, cc_adapter.max_num_windows());
   cc_adapter.set_cross_chain_var_adaptation(var_adapt);
   for (int i = 0; i < num_iterations; ++i) {
     cc_adapter.add_cross_chain_sample(dummy, draw_vecs[comm.rank()](i));

     dummy_sampler sampler(chain_stepsize);
     cc_adapter.cross_chain_adaptation(&sampler, dummy, logger);

     EXPECT_FALSE(cc_adapter.is_cross_chain_adapted());

     if (cc_adapter.is_cross_chain_adapt_window_end()) {
       int curr_win_count = cc_adapter.num_active_cross_chain_windows();
       for (int win = 0; win < curr_win_count; ++win) {
         const std::vector<const double* > p{
           draws[0] + win * window_size,
             draws[1] + win * window_size,
             draws[2] + win * window_size,
             draws[3] + win * window_size};
         double rhat =
           stan::analyze::compute_potential_scale_reduction(p, (curr_win_count - win) * window_size);
         double ess =
           stan::analyze::compute_effective_sample_size(p, (curr_win_count - win) * window_size);
         if (comm.rank() == 0) {
           EXPECT_FLOAT_EQ(rhat, cc_adapter.cross_chain_adapt_rhat()(win));
           EXPECT_FLOAT_EQ(ess, cc_adapter.cross_chain_adapt_ess()(win));
         }
       }
     }
   }
 }

  // a target_ess that 4-window tests should pass
 {
   int curr_win_count = 4;
   stan::mcmc::mpi_cross_chain_adapter cc_adapter(num_iterations, window_size, num_chains, 1.1, 50);
   stan::mcmc::mpi_var_adaptation var_adapt(0, cc_adapter.max_num_windows());
   cc_adapter.set_cross_chain_var_adaptation(var_adapt);
   for (int i = 0; i < num_iterations; ++i) {
     dummy_sampler sampler(chain_stepsize);
     cc_adapter.add_cross_chain_sample(dummy, draw_vecs[comm.rank()](i));

     double step = chain_stepsize;
     cc_adapter.cross_chain_adaptation(&sampler, dummy, logger);
     if (cc_adapter.is_cross_chain_adapted()) break;
   }
   int win = 0; // win = 0 @c is_adapted
   const std::vector<const double* > p{
     draws[0] + win * window_size,
       draws[1] + win * window_size,
       draws[2] + win * window_size,
       draws[3] + win * window_size};
   double rhat =
     stan::analyze::compute_potential_scale_reduction(p, (curr_win_count - win) * window_size);
   double ess =
     stan::analyze::compute_effective_sample_size(p, (curr_win_count - win) * window_size);
   if (comm.rank() == 0) {
     EXPECT_FLOAT_EQ(rhat, cc_adapter.cross_chain_adapt_rhat()(win));
     EXPECT_FLOAT_EQ(ess, cc_adapter.cross_chain_adapt_ess()(win));
     for (int i = win + 1; i < max_num_windows; ++i) {
       EXPECT_FLOAT_EQ(cc_adapter.cross_chain_adapt_rhat()(i) ,0.0);
       EXPECT_FLOAT_EQ(cc_adapter.cross_chain_adapt_ess()(i)  ,0.0);
     }
   }
  }
}

#endif
