#+TITLE: Torsten: A Pharmacokinetic/Pharmacodynamic Model Library for Stan
#+SUBTITLE: User's Guide @@latex:\\@@ @@html:<br>@@ (Torsten Version 0.89rc, Stan version 2.27.0)
#+LATEX_CLASS: amsbook
#+LATEX_CLASS_OPTIONS: [12pt, reqno, oneside]

# title page
#+LATEX_HEADER: \newcommand\subtitle[1]{\newcommand\mrgsubtitle{#1}}
#+LATEX_HEADER: \newcommand\mrgproject{}
#+LATEX_HEADER: \newcommand\mrgtitle{Torsten: A Pharmacokinetic/Pharmacodynamic Model Library for Stan}
#+LATEX_HEADER: \newcommand\mrgsubtitle{\large{User's Guide} \linebreak (Torsten Version 0.89rc, Stan version 2.27.0)}
#+LATEX_HEADER: \include{mrgtitlepage}

# make index
#+LATEX_HEADER: \usepackage{imakeidx}
#+LATEX_HEADER: \makeindex

#+LATEX_HEADER: \usepackage[letterpaper, width=6.5in, height=9in]{geometry}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{pdfpages}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{epstopdf}

# define MRG branding color
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \definecolor{MRGGreen}{rgb}{0, 0.350, 0.200}
#+LATEX_HEADER: \usepackage[colorlinks=true, citecolor=MRGGreen, urlcolor=MRGGreen, linkcolor=MRGGreen]{hyperref}

#+LATEX_HEADER: \usepackage{bold-extra}
#+LATEX_HEADER: \usepackage{courier}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{siunitx}
#+LATEX_HEADER: \usepackage{booktabs}
#+LATEX_HEADER: \usepackage[framemethod=TikZ, skipabove=10pt, skipbelow=10pt, backgroundcolor=black!3, roundcorner=4pt, linewidth=1pt]{mdframed}
#+LATEX_HEADER: \BeforeBeginEnvironment{minted}{\begin{mdframed}}
#+LATEX_HEADER: \AfterEndEnvironment{minted}{\end{mdframed}}

#+LATEX_HEADER: \usepackage{subcaption}

# remove "chapter" in chapter name
#+LATEX_HEADER: \renewcommand{\chaptername}{}
#+LATEX_HEADER: \numberwithin{equation}{chapter}
#+LATEX_HEADER: \numberwithin{figure}{chapter}
#+LATEX_HEADER: \numberwithin{table}{chapter}

#+LATEX_HEADER: \usepackage[section]{placeins}

# section numbering begins with chapter
#+LATEX_HEADER: \renewcommand{\thesection}{\thechapter.\arabic{section}}

#+LATEX_HEADER: \theoremstyle{remark}
#+LATEX_HEADER: \newtheorem{example}{Example}
#+LATEX_HEADER: \newtheorem{remark}{Remark}

#+MACRO: torsten_ver v0.89rc
#+MACRO: stan_ver v2.27.0
#+MACRO: newline @@latex:\\@@ @@html:<br>@@ @@ascii:|@@

# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <link rel="stylesheet" href="tufte.css"/>

#+hugo_base_dir: ./hugo
#+hugo_section: /

#+hugo_weight: auto
#+hugo_auto_set_lastmod: t

#+OPTIONS: title:t, num:3 d:(not "latex")

* Development team
   :PROPERTIES:
   :UNNUMBERED: t
   :EXPORT_FILE_NAME: dev-team
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_HUGO_MENU: :menu "main"
   :END:
- [[mailto:billg@metrumrg.com][William R. Gillespie]] , [[https://www.metrumrg.com/][Metrum Research Group]]
- [[mailto:yiz@metrumrg.com][Yi Zhang]] , [[https://www.metrumrg.com/][Metrum Research Group]]
- [[mailto:charles.margossian@columbia.edu][Charles Margossian]] , Columbia University, Department of Statistics
* Acknowledgements
  :PROPERTIES:
  :UNNUMBERED: t
  :EXPORT_FILE_NAME: Acknowledgements
  :EXPORT_DATE: <2021-06-25 Fri>
  :EXPORT_HUGO_MENU: :menu "main"
  :END:
** Institutions
   :PROPERTIES:
   :UNNUMBERED: t
   :END:
We thank Metrum Research Group, Columbia University, and AstraZeneca.
** Funding
   :PROPERTIES:
   :UNNUMBERED: t
   :END:
This work was funded in part by the following organizations:
*** Office of Naval Research (ONR) contract N00014-16-P-2039
  provided as part of the Small Business Technology Transfer (STTR)
  program. The content of the information presented in this document
  does not necessarily reflect the position or policy of the
  Government and no official endorsement should be inferred.
*** Bill & Melinda Gates Foundation.
** Individuals
   :PROPERTIES:
   :UNNUMBERED: t
   :END:
  We thank the Stan Development Team for giving us guidance on how to
  create new Stan functions and adding features to Stan's core language
  that facilitate building ODE-based models.

  We also thank Kyle Baron and Hunter Ford for helpful advice on coding
  in C++ and using GitHub, Curtis Johnston for reviewing the User
  Manual, and Yaming Su for using Torsten and giving us feedback.
* Introduction
  :PROPERTIES:
  :EXPORT_FILE_NAME: _index
  :EXPORT_DATE: <2021-06-25 Fri>
  :EXPORT_OPTIONS: toc:nil num:nil
  :END:
[[https://mc-stan.org/][Stan]] is an open source probabilistic programing language designed
primarily to do Bayesian data analysis
cite:carpenter17_stan. It provides an expressive syntax for statistic
modeling and contains an efficient variant of No U-Turn
Sampler(NUTS), an adaptative Hamiltonian Monte Carlo
algorithm that was proven more efficient than commonly used Monte Carlo Markov Chains
(MCMC) samplers for complex high dimensional problems cite:hoffman_no-u-turn_2011,betancourt_hmc_2018. 

:hugo:
#+attr_html: :width 300
[[file:https://metrumrg.com/wp-content/uploads/2019/07/torsten-white-stan-cropped.png]]
:END:

Torsten is a collection of Stan functions to facilitate analysis of
pharmacometric data. Given an event schedule and an ODE system, it calculates amounts
in each compartment. The current version includes [fn:1]:
- Specific linear compartment models:
  + One compartment model with first order absorption.
  + Two compartment model with elimination from and first order absorption into central compartment
- General linear compartment model described by a system of first-order _linear_ Ordinary Differential Equations (ODEs).
- General compartment model described by a system of first order ODEs.
- Coupled model with PK forcing function described by a linear one or two compartment model and PD components solved by numerical ODE integration.

The models and data format are based on
NONMEM \textregistered{} [fn::NONMEM\textregistered{} is licensed and distributed by ICON Development Solutions.]/NMTRAN/PREDPP
conventions including:
- recursive calculation of model predictions, which permits piecewise constant covariate values,
- bolus or constant rate inputs into any compartment,
- single dose and multiple dose events,
- steady state dosing events,
- NMTRAN-compartible data items such as TIME, EVID, CMT, AMT, RATE, ADDL, II, and SS.

All real variable arguments in Torsten functions can be passed as Stan =parameters=.

[fn:1]  *WARNING:* The current version of Torsten is a /prototype/. It is being released for review and comment, and to support limited research applications. It has not been rigorously tested and should not be used for critical applications without further testing or cross-checking by comparison with other methods. We encourage interested users to try Torsten out and are happy to assist. Please report issues, bugs, and feature requests on [[https://github.com/metrumresearchgroup/stan][our GitHub page]].

** Implementation summary
    :PROPERTIES:
    :EXPORT_FILE_NAME: Implementation-summary
    :EXPORT_DATE: <2021-06-25 Fri>
    :END:
- Current Torsten {{{torsten_ver}}} is based on Stan {{{stan_ver}}}.
- All functions are programmed in C++ and are compatible
  with the Stan math automatic differentiation library cite:carpenter15_stan_math_librar
- One and two compartment models are based on analytical solutions of governing ODEs.
- General linear compartment models are based on semi-analytical solutions using the built-in matrix exponential function
- General compartment models are solved numerically using built-in ODE integrators in Stan. The tuning parameters of the solver are adjustable. The steady state solution is calculated using a numerical algebraic solver.
- Coupled model that has PK forcing function solved analytically and PD ODE components solved numerically.

** Development plans
    :PROPERTIES:
    :EXPORT_FILE_NAME: Development-plans
    :EXPORT_DATE: <2021-06-25 Fri>
    :END:
Our current plans for future development of Torsten include the
following:
- Build a system to easily share packages of Stan functions
  (written in C++ or in the Stan language)
- Optimize Matrix exponential functions
  + Function for the action of Matrix Exponential on a vector
  + Hand-coded gradients
  + Special algorithm for matrices with special properties
- Develop new method for large-scale hierarchical models with costly
  ODE solving.
- Fix issue that arises when computing the adjoint of the lag time
  parameter (in a dosing compartment) evaluated at $t_{\text{lag}} = 0$.
- Extend formal tests
  + More unit tests and better CD/CI support.
  + Comparison with simulations from the R package
    =mrgsolve= and the software NONMEM\textregistered{}
  + Recruit non-developer users to conduct beta testing
    
* Changelog
    :PROPERTIES:
    :EXPORT_FILE_NAME: Changelog
    :EXPORT_HUGO_MENU: :menu "main"
    :EXPORT_OPTIONS: toc:t num:nil
    :EXPORT_DATE: <2021-06-25 Fri>
    :END:
- Version 0.89 <2021-06-15 Tue>
  + Changed
    - New backend for ODE events solvers.
    - Use vector instead of array as ODE function state & return type.
    - Simplified ODE integrator naming, e.g. =pmx_ode_bdf[_ctrl]=.
    - Update to Stan version 2.27.0.
- Version 0.88 <2020-12-18 Fri>
  + Added
    - Bioavailability, lag time, ODE real & integer data are optional in PMX function signatures.
    - Support all EVID options from NM-TRAN and mrgsolve.
    - Support steady-state infusion through multiple interdose intervals.
  # - Experimental feature of cross-chain warmup and multilevel MPI paralleism.
  + Changed
    - More efficient memory management of COVDES implenmentation.
    - Update of MPI framework to adapt multilevel paralleism.
    - Update to Stan version 2.25.0.
    - Use cmdstanr as R interface.
    - Stop supporting rstan as R interface.
- Version 0.87 <2019-07-26 Fri>
  + Added
    - MPI dynamic load balance for Torsten's population ODE integrators
      + src_stan[:exports code]{pmx_integrate_ode_group_adams}
      + src_stan[:exports code]{pmx_integrate_ode_group_bdf}
      + src_stan[:exports code]{pmx_integrate_ode_group_rk45}
      To invoke dynamic load balance instead of default static
      balance for MPI, issue =TORSTEN_MPI=2= in =make/local=.
    - Support =RATE= as parameter in src_stan[:exports code]{pmx_solve_rk45/bdf/adams}
      functions.
  + Changed
    - Some fixes on steady-state solvers
    - Update to rstan version 2.19.2.
- Version 0.86 <2019-05-15 Wed>
  + Added
    - Torsten's ODE integrator functions
      + src_stan[:exports code]{pmx_integrate_ode_adams}
      + src_stan[:exports code]{pmx_integrate_ode_bdf}
      + src_stan[:exports code]{pmx_integrate_ode_rk45}
      and their counterparts to solve a population/group of
      subjects governed by an ODE
      + src_stan[:exports code]{pmx_integrate_ode_group_adams}
      + src_stan[:exports code]{pmx_integrate_ode_group_bdf}
      + src_stan[:exports code]{pmx_integrate_ode_group_rk45}
    - Torsten's population PMX solver functions for general
      ODE models
      + src_stan[:exports code]{pmx_solve_group_adams}
      + src_stan[:exports code]{pmx_solve_group_bdf}
      + src_stan[:exports code]{pmx_solve_group_rk45}
    - Support time step =ts= as parameter in src_stan[:exports code]{pmx_integrate_ode_xxx}
      solvers.
  + Changed
    - Renaming Torsten functions in previous releases, the
      old-new name mapping is
      + src_stan[:exports code]{PKModelOneCpt} \rightarrow src_stan[:exports code]{pmx_solve_onecpt}
      + src_stan[:exports code]{PKModelTwoCpt} \rightarrow src_stan[:exports code]{pmx_solve_onecpt}
      + src_stan[:exports code]{linOdeModel} \rightarrow src_stan[:exports code]{pmx_solve_linode}
      + src_stan[:exports code]{generalOdeModel_adams} \rightarrow src_stan[:exports code]{pmx_solve_adams}
      + src_stan[:exports code]{generalOdeModel_bdf} \rightarrow src_stan[:exports code]{pmx_solve_bdf}
      + src_stan[:exports code]{generalOdeModel_rk45} \rightarrow src_stan[:exports code]{pmx_solve_rk45}
      + src_stan[:exports code]{mixOde1CptModel_bdf} \rightarrow src_stan[:exports code]{pmx_solve_onecpt_bdf}
      + src_stan[:exports code]{mixOde1CptModel_rk45} \rightarrow src_stan[:exports code]{pmx_solve_onecpt_rk45}
      + src_stan[:exports code]{mixOde2CptModel_bdf} \rightarrow src_stan[:exports code]{pmx_solve_twocpt_bdf}
      + src_stan[:exports code]{mixOde2CptModel_rk45} \rightarrow src_stan[:exports code]{pmx_solve_twocpt_rk45}
      Note that the new version of the above functions return
      the /transpose/ of the matrix returned by the old
      versions, in order to improve memory efficiency. The old version are retained but will be
      deprecated in the future. 
    - Update to Stan version 2.19.1.

- Version 0.85 <2018-12-04 Tue>
  + Added
    - Dosing rate as parameter
  + Changed
  - Update to Stan version 2.18.0.

- Version 0.84 <2018-02-24>
  + Added
    - Piecewise linear interpolation function.
    - Univariate integral functions.
  + Changed
    - Update to Stan version 2.17.1.
    - Minor revisions to User Manual.
    - Bugfixes.
- Version 0.83 <2017-08-02>
  + Added
    - Work with TorstenHeaders
    - Each chain has a different initial estimate
  + Changed
    - User manual
    - Fix misspecification in ODE system for TwoCpt example.
    - Other bugfixes
- Version 0.82 <2017-01-29>
  + Added
    - Allow parameter arguments to be passed as 1D or 2D arrays
    - More unit tests
    - Unit tests check automatic differentiation against finite differentiation.
  + Changed
    - Split the parameter argument into three arguments: pMatrix
      (parameters for the ODEs -- note: for =linOdeModel=, pMatrix
      is replaced by the constant rate matrix K), biovar
      (parameters for the biovariability), and tlag (parameters
      for the lag time).
    - bugfixes
- Version 0.81 <2016-09-27>
  + Added
    - linCptModel (linear compartmental model) function
- Version 0.80a <2016-09-21 Wed>
  + Added
    - check\under{}finite statements in pred\under{}1 and pred\under{}2 to reject metropolis proposal if initial conditions are not finite

* Installation
  :PROPERTIES:
  :EXPORT_FILE_NAME: Installation
  :EXPORT_DATE: <2021-06-25 Fri>
  :EXPORT_HUGO_MENU: :menu "main"
  :EXPORT_OPTIONS: toc:nil num:nil
  :END:
Currently Torsten is based on a forked version of Stan and hosted on GitHub
- https://github.com/metrumresearchgroup/Torsten
The latest {{{torsten_ver}}} is
compatible with Stan {{{stan_ver}}}. Torsten can be accessed from
command line for cmdstan interface and =cmdstanr=
(https://mc-stan.org/cmdstanr/) for R interface. It requires
a modern C++11 compiler as well as a Make utility. See cite:cmdstan_team_2020 for details of installation and
required toolchain. In particular, we recommend the folowing versions
of C++ compilers:
- Linux: g++ >=7.5 or clang >=8.0,
- macOS: the XCode version of clang,
- Windows: g++ 8.1 (available with RTools 4.0).

On windows, the Make utility =mingw32-make= can be installed as part
of RTools.

** Command line interface
The command line interface ~cmdstan~ is available along with Torsten
and can be found at =Torsten/cmdstan=. 

After installation, one can use the following command to build a Torsten model ~model_name~ in ~model_path~
#+BEGIN_SRC sh
  cd Torsten/cmdstan
  make model_path/model_name # replace "make" with "mingw32-make" on Windows platform
#+END_SRC

** R interface
 After installing cmdstanr from https://mc-stan.org/cmdstanr/, use the
 following command to set path 
 #+BEGIN_SRC r
   cmdstanr::set_cmdstan_path("Torsten/cmdstan")
 #+END_SRC
 Then one can follow https://mc-stan.org/cmdstanr/articles/cmdstanr.html to compile
 and run Torsten models.

** MPI support
   :PROPERTIES:
   :CUSTOM_ID: mpi-support
   :END:
Torsten's MPI support is of a different flavour than
=reduce_sum= found in Stan. To be able to utilize MPI
parallelisation, one first needs to ensure an MPI library
such as 
- https://www.mpich.org/downloads/
- https://www.open-mpi.org/software/ompi/
is available. Torsen's implementation is tested on
both =MPICH= and =OpenMPI=.

To use MPI-supported population/group solvers,
add/edit =make/local=
#+BEGIN_SRC sh
  TORSTEN_MPI=1

  # path to MPI headers
  CXXFLAGS += -isystem /usr/local/include
  # if you are using Metrum's metworx platform, add MPICH3's
  # headers with
  # CXXFLAGS += -isystem /usr/local/mpich3/include
#+END_SRC
Note that currently =TORSTEN_MPI= and =STAN_MPI= flags
conflict on processes management and cannot be used in a
same Stan model, and MPI support is only available through =cmdstan=
interface.

** Testing
Models in =example-models= directory are for tutorial and demonstration.
The following shows how to build and run the two-compartment model
using =cmdstanr=, and use =bayesplot= to examine posterior density of =CL=.
#+BEGIN_SRC r
  library("cmdstanr")
  set_cmdstan_path("Torsten/cmdstan")
  file.dir <- file.path("Torsten", "example-models", "pk2cpt")
  file  <- file.path(file.dir, "pk2cpt.stan")
  model <- cmdstan_model(file)
  fit <- model$sample(data = file.path(file.dir, "pk2cpt.data.R"),
                      init = file.path(file.dir, "pk2cpt.init.R"),
                      seed = 123,
                      chains = 4,
                      parallel_chains = 2,
                      refresh = 500)
  bayesplot::mcmc_dens_overlay(fit$draws("CL"))
#+END_SRC

# With project in ~torsten_path~, set the envionment variable
# src_sh[:exports code]{TORSTEN_PATH} as
# #+BEGIN_SRC sh
#   # in bash
#   export TORSTEN_PATH=torsten_path
#   # in csh
#   setenv TORSTEN_PATH torsten_path
# #+END_SRC

# To test the installation, run
# #+BEGIN_SRC sh
#   ./test-torsten.sh --unit        # math unit test
#   ./test-torsten.sh --signature   # stan function # signature test
#   ./test-torsten.sh --model    # R model test, takes long time to finish
# #+END_SRC

* Using Torsten
   :PROPERTIES:
   :EXPORT_HUGO_SECTION: function
   :EXPORT_FILE_NAME: _index
   :EXPORT_DATE: <2021-06-25 Fri>
   :CUSTOM_ID: using-torsten
   :END:
The reader should have a basic understanding of [[https://mc-stan.org/users/documentation/][how Stan works]].
In this section we go through the different functions Torsten adds to
Stan. The code for the examples can be found at Torsten's [[https://github.com/metrumresearchgroup/Torsten/tree/master/example-models][example models]].

** Events specification
   :PROPERTIES:
   :EXPORT_FILE_NAME: events
   :EXPORT_DATE: <2021-06-25 Fri>
   :END:

Torsten's functions are prefixed with =pmx_=. 
For some of their arguments we adopt NM-TRAN format for events
specification(Table [[tab:event_args]]).

#+CAPTION: NM-TRAN compatible event specification arguments. All arrays should have the same length corresponding to the number of events.
#+NAME: tab:event_args
| Argument Name | Definition                  | Stan data type |
|---------------+-----------------------------+----------------|
| =time=         | event time                  | =real[]=       |
| =amt=          | dosing amount               | =real[]=       |
| =rate=         | infusion rate               | =real[]=       |
| =ii=           | interdose interval          | =real[]=       |
| =evid=         | event ID                    | =int[]=        |
| =cmt=          | event compartment           | =int[]=        |
| =addl=         | additionial identical doses | =int[]=        |
| =ss=           | steady-state dosing flag    | =int[]=        |
|---------------+-----------------------------+----------------|
All the src_stan[:exports code]{real[]} arguments above are allowed to
be src_stan[:exports code]{parameters} in a Stan model.
In addtion, Torsten functions
support optional arguments and overloaded signatures.
Optional arguments are indicated by surrounding square bracket =[]=.
Table below shows three commonly used PMX model arguments that support
overloading. In the rest of this document we assume this convention unless indicated otherwise.

#+CAPTION: PMX model parameter overloadings. One can use 1d array src_stan[:exports code ]{real[]} to indicate constants of all events, or 2d array src_stan[:exports code ]{real[ , ]} so that the \(i\)th row of the array describes the model arguments for time interval $(t_{i-1}, t_i)$, and the number of the rows equals to the size of =time=.
#+NAME: tab:event_params
| Argument Name | Definition               | Stan data type          | Optional           |
|---------------+--------------------------+-------------------------+--------------------|
| =theta=       | model parameters         | =real[]= or =real[ , ]= | N                  |
| =biovar=      | bioavailability fraction | =real[]= or =real[ , ]= | Y (default to 1.0) |
| =tlag=        | lag time                 | =real[]= or =real[ , ]= | Y (default to 0.0) |
|---------------+--------------------------+-------------------------+--------------------|

** One Compartment Model
   :PROPERTIES:
   :EXPORT_FILE_NAME: one-cpt
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
#+INDEX: One Compartment Model
*** Description
Function =pmx_solve_onecpt= solves a one-compartment PK
model (Figure [[one_two_cpt_models]]). The model obtains the mass $(y_1, y_2)$ in each compartment
by solving the ordinary differential equations(ODEs)
\begin{align}\label{eq:onecpt}
  y_1' &= -k_a y_1, \\
  y_2' &= k_a y_1 - \left(\frac{CL}{V_2} + \frac{Q}{V_2}\right) y_2.
\end{align}
The plasma concentrations of parent drug in the central compartment
can then be calculated as $c=y_2/V_2$.

:hugo:
#+CAPTION: One and two compartment models with first order absorption implemented in Torsten.
#+NAME: one_two_cpt_models
#+attr_html: :width 300
[[file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/master/docs/graphics/cptModels.png]]
:END:
:latex:
#+CAPTION: One and two compartment models with first order absorption implemented in Torsten.
#+NAME: one_two_cpt_models
#+ATTR_LATEX: :width 1.5in
[[file:./graphics/cptModels.png]]
:END:

*** Usage
#+BEGIN_SRC stan
  matrix = pmx_solve_onecpt(time, amt, rate, ii, evid, cmt, addl, ss, theta [, biovar, tlag ] )
#+END_SRC

*** Arguments
    See Tables in Section [[*Events specification]].
*** Return value
    An =ncmt=-by-=nt= matrix, where =nt= is the number of time steps and =ncmt=2= is the number of compartments.    
*** Note
- ODE Parameters =theta= should consist of $CL$, $V_2$, $k_a$, in that order.
- =biovar= and =tlag= are optional, so that the following are allowed:
#+BEGIN_SRC stan
  pmx_solve_onecpt(..., theta);
  pmx_solve_onecpt(..., theta, biovar);
  pmx_solve_onecpt(..., theta, biovar, tlag);
#+END_SRC
- Setting $k_a = 0$ eliminates the first-order absorption.

** Two Compartment Model
   :PROPERTIES:
   :EXPORT_FILE_NAME: two-cpt
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
*** Description
Function =pmx_solve_twocpt= solves a two-compartment PK
model (Figure [[one_two_cpt_models]]). The model obtains the mass $(y_1, y_2, y_3)$ in each compartment
by solving the ODEs
\begin{align} \label{eq:twocpt}
  y_1' &= -k_a y_1 \\
  y_2' &= k_a y_1 - \left(\frac{CL}{V_2} + \frac{Q}{V_2}\right) y_2 +  \frac{Q}{V_3}  y_3  \\ 
  y_3' &= \frac{Q}{V_2} y_2 - \frac{Q}{V_3} y_3
\end{align}
The plasma concentrations of parent drug in the central compartment
can then be calculated as $c=y_2/V_2$.

*** Usage
#+INDEX: Two Compartment Model
#+BEGIN_SRC stan
  matrix = pmx_solve_twocpt(time, amt, rate, ii, evid, cmt, addl, ss, theta [, biovar, tlag ] )
#+END_SRC

*** Arguments
    See Tables in Section [[*Events specification]].
*** Return value
    An =ncmt=-by-=nt= matrix, where =nt= is the number of time steps and =ncmt=3= is the number of compartments.

*** Note
- ODE Parameters =theta= consists of $CL$, $Q$, $V_2$, $V_3$, $k_a$.
- =biovar= and =tlag= are optional, so that the following are allowed:
#+BEGIN_SRC stan
  pmx_solve_twocpt(..., theta);
  pmx_solve_twocpt(..., theta, biovar);
  pmx_solve_twocpt(..., theta, biovar, tlag);
#+END_SRC
- Setting $k_a = 0$ eliminates the first-order absorption.

** General Linear ODE Model Function
   :PROPERTIES:
   :EXPORT_FILE_NAME: linode
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
*** Description
Function =pmx_solve_linode= solves a (piecewise) linear ODEs model with coefficients
in form of matrix $K$
\begin{equation}
y^\prime\left(t\right) = Ky\left(t\right)
\end{equation}
For example, in a two-compartment model with first order absorption, $K$ is
\begin{equation}
  K = \left[\begin{array}{ccc}
              -k_a & 0 & 0 \\
              k_a & -\left(k_{10} + k_{12}\right) & k_{21} \\
              0 & k_{12} & -k_{21}
            \end{array}\right]
\end{equation}
where $k_{10}=CL/V_2$, $k_{12}=Q/V_2$, and $k_{21}=Q/V_3$.

*** Usage
#+INDEX: General linear model 
#+BEGIN_SRC stan
  matrix = pmx_solve_linode(time, amt, rate, ii, evid, cmt, addl, ss, K, biovar, tlag )
#+END_SRC

*** Arguments
- =K=
      System parameters. =K= can be either
  - a src_stan[:exports code ]{matrix} for constant parameters in all events, or
  - an array of matrices src_stan[:exports code ]{matrix K[nt]} so that the \(i\)th entry of the array describes
    the model parameters for time interval $(t_{i-1}, t_i)$,
    and the number of the rows equals to the number of event time =nt=.
- See Tables in Section [[*Events specification]] for the rest of arguments.
*** Return value
    An =n=-by-=nt= matrix, where =nt= is the number of time steps and =n= is the number of rows(columns) of square matrix =K=.

** General ODE Model Function
   :PROPERTIES:
   :EXPORT_FILE_NAME: genode
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
*** Description
    Function =pmx_solve_adams=, =pmx_solve_bdf=, and =pmx_solve_rk45= solve a first-order ODE system
    specified by user-specified right-hand-side function =ODE_rhs= $f$
    \begin{equation*}
    y'(t) = f(t, y(t))
    \end{equation*}
    In the case where the =rate= vector $r$ is non-zero, this equation becomes:
    \begin{equation*}
    y'(t) = f(t, y(t)) + r
    \end{equation*}
*** Usage
#+INDEX: General ODE Model
#+BEGIN_SRC stan
  matrix pmx_solve_[adams || rk45 || bdf](ODE_rhs, int nCmt, time, amt, rate, ii, evid, cmt, addl, ss, theta, [ biovar, tlag, real[,] x_r, int [,] x_i, real rel_tol, real abs_tol, int max_step, real as_rel_tol, real as_abs_tol, int as_max_step ] );
#+END_SRC
Here src_stan[:exports code]{[adams || rk45 || bdf]} indicates the
function name can use any of the three suffixes. See below.

*** Arguments
- =ODE_rhs=
     ODE right-hand-side $f$. It should be defined in
     src_stan[:exports code]{functions} block and has the following format
#+BEGIN_SRC stan
  vector = f(real t, vector y, real[] param, real[] dat_r, int[] dat_i) {...}
#+END_SRC
     Here =t= is time, =y= the unknowns of ODE, =param= the parameters, =dat\_r= the real data, =dat\_i=
     the integer data. =param=,
     =dat\_r=, and =dat\_i= are from
     the entry of =theta=, =x_r=,
     and =x_i= corresponding to
     =t=, respectively.
     $f$ should not include dosing rates in its
     definition, as Torsten automatically update $f$
     when the corresponding event indicates infusion dosage.
- =nCmt= 
     The number of compartments, equivalently, the dimension of the ODE system.
- =x_r=
     2d arary real data to be passed to ODE RHS. If specified, its 1st
     dimension should have the same size as =time=.
- =x_i=
     2d arary integer data to be passed to ODE RHS. If specified, its 1st
     dimension should have the same size as =time=.
- =rel_tol= 
     The relative tolerance for numerical integration, default to 1.0E-6.
- =abs_tol=
     The absolute tolerance for numerical integration, default to 1.0E-6.
- =max_step=
     The maximum number of steps in numerical integration, default to $10^6$.
- =as_rel_tol=
     The relative tolerance for algebra solver for steady state solution, default to 1.0E-6.     
- =as_abs_tol=
     The absolute tolerance for algebra solver for steady state solution, default to 1.0E-6.
- =as_max_step=
     The maximum number of interations in algebra solver for steady state solution, default to $10^2$.
- See Tables in Section [[*Events specification]] for the rest of arguments.

*** Return value
    An =nCmt=-by-=nt= matrix, where =nt= is the size of =time=.
*** Note
    - See Section [[*ODE integrator function]] for different types of integrator and general guidance.
    - See Section [[*ODE integrator function]] for comments on accuracy and tolerance.
    - The default values of =atol=,
      =rtol=, and =max_step= are
      based on a limited amount of PKPD test problems and should not be considered as
      universally applicable. We strongly recommend user to set these values
      according to physical intuition and numerical tests. See also Section [[*ODE integrator function]].
    - With optional arguments indicated by square bracket, the following calls are allowed:
#+BEGIN_SRC stan
  pmx_solve_[adams || rk45 || bdf](..., theta);
  pmx_solve_[adams || rk45 || bdf](..., theta, rel_tol, abs_tol, max_step);
  pmx_solve_[adams || rk45 || bdf](..., theta, rel_tol, abs_tol, max_step, as_rel_tol, as_abs_tol, as_max_step);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, rel_tol, abs_tol, max_step);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, rel_tol, abs_tol, max_step, as_rel_tol, as_abs_tol, as_max_step);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, tlag);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, tlag, rel_tol, abs_tol, max_step);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, tlag, rel_tol, abs_tol, max_step, as_rel_tol, as_abs_tol, as_max_step);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r, rel_tol, abs_tol, max_step);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r, rel_tol, abs_tol, max_step, as_rel_tol, as_abs_tol, as_max_step);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r, x_i);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r, x_i, rel_tol, abs_tol, max_step);
  pmx_solve_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r, x_i, rel_tol, abs_tol, max_step, as_rel_tol, as_abs_tol, as_max_step);
#+END_SRC

** Coupled ODE Model Function
   :PROPERTIES:
   :EXPORT_FILE_NAME: coupled
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
#+INDEX: coupled ODE Model
*** Description
When the ODE system consists of two subsystems in form of
\begin{align*}
  y_1^\prime &= f_1(t, y_1), \\
  y_2^\prime &= f_2(t, y_1, y_2),
\end{align*}
with $y_1$, $y_2$, $f_1$, and $f_2$ being vector-valued functions, and
$y_1^\prime$ independent of $y_2$, the solution can be
accelerated if $y_1$ admits an analytical solution which can
be introduced into the ODE for $y_2$ for numerical
integration. This structure arises in PK/PD
models, where $y_1$ describes a forcing PK function and $y_2$ the PD
effects. In the example of a Friberg-Karlsson
semi-mechanistic model(see below), we observe an average speedup of
$\sim 47 \pm 18 \%$ when using the mix solver in lieu of the numerical
integrator. In the context, currently the couple solver supports one-
& two-compartment for PK model, and =rk45= &
=bdf= integrator for nonlinear PD model.
*** Usage
#+BEGIN_SRC stan
  matrix pmx_solve_onecpt_[ rk45 || bdf ](reduced_ODE_system, int nOde, time, amt, rate, ii, evid, cmt, addl, ss, theta, biovar, tlag [, real rel_tol, real abs_tol, int max_step, real as_rel_tol, real as_abs_tol, int as_max_step ] );
  matrix pmx_solve_twocpt_[ rk45 || bdf ](reduced_ODE_system, int nOde, time, amt, rate, ii, evid, cmt, addl, ss, theta, biovar, tlag [, real rel_tol, real abs_tol, int max_step, real as_rel_tol, real as_abs_tol, int as_max_step ] );
#+END_SRC
*** Arguments
- =reduced_ODE_rhs=
     The system  numerically solve ($y_2$ in the above discussion, also called the
     /reduced system/ and =nOde= the number of equations in
     the _reduced_ system. The function that defines a reduced
     system has an almost identical signature to that used for a full
     system, but takes one additional argument: $y_1$, the PK states,
     i.e. solution to the PK ODEs.
     #+BEGIN_SRC stan
       vector reduced_ODE_rhs(real t, vector y2, vector y1, real[] theta, real[] x_r, int[] x_i) 
     #+END_SRC
- =nCmt= 
     The number of compartments. Equivalently, the dimension of the ODE system.
- =rel_tol= 
     The relative tolerance for numerical integration, default to 1.0E-6.
- =abs_tol=
     The absolute tolerance for numerical integration, default to 1.0E-6.
- =max_step=
     The maximum number of steps in numerical integration, default to $10^6$.
- See Tables in Section [[*Events specification]] for the rest of arguments.
*** Return value
    An =(nPk + nOde)= \times =nt= matrix, where =nt= is the size of
    =time=, and =nPk= equals to 2 in
    =pmx_solve_onecpt_= functions
    and 3 in =pmx_solve_twocpt_= functions.

** General ODE-based Population Model Function
   :PROPERTIES:
   :EXPORT_FILE_NAME: ode-pop
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
*** Description
All the preivous functions solves for a single sunject. Torsten also
provides population modeling counterparts for ODE solutions. The
functions solve for a population that share an ODE model but with
subject-level parameters and event specifications and have similar
signatures to single-subject functions, except that now events
arguments =time=, =amt=, =rate=, =ii=,
=evid=, =cmt=,
=addl=, =ss= specifies the entire
population, one subject after another.
*** Usage
#+INDEX: General ODE Model
#+BEGIN_SRC stan
  matrix pmx_solve_group_[adams || rk45 || bdf](ODE_rhs, int nCmt, int[] len, time, amt, rate, ii, evid, cmt, addl, ss, theta, [ biovar, tlag, real[,] x_r, int [,] x_i, real rel_tol, real abs_tol, int max_step, real as_rel_tol, real as_abs_tol, int as_max_step ] );
#+END_SRC
Here src_stan[:exports code]{[adams || rk45 || bdf]} indicates the
function name can be of any of the three suffixes. See Section [[*ODE integrator function]].
*** Arguments
- =ODE_rhs=
     Same as in Section [[*ODE integrator function]].
- =time=, =amt=, =rate=, =ii=, =evid=, =cmt=, =addl=, =ss=
     2d-array arguments that describe data record for the
     entire population (see also Tables in Section [[*Events specification]]). They must have same size in the first
     dimension. Take =evid= for example. Let $N$ be the
     population size, then =evid[1,]= to
     =evid[n1,]= specifies events ID for subject 1,
     =evid[n1 + 1,]= to
     =evid[n1 + n2,]= for subject 2, etc. With $n_i$
     being the number of events for subject $i$, $i=1, 2, \dots, N$, the
     size of =evid='s first dimension is $\sum_{i}n_i$.
- =len= 
     The length of data for each subject within
     the above events arrays. The size of =len= equals
     to population size $N$.
- =nCmt= 
     The number of compartments. Equivalently, the dimension of the ODE system.
- =x_r=
     2d arary real data to be passed to ODE RHS. If specified, its 1st
     dimension should have the same size as =time=.
- =x_i=
     2d arary integer data to be passed to ODE RHS. If specified, its 1st
     dimension should have the same size as =time=.
- =rel_tol= 
     The relative tolerance for numerical integration, default to 1.0E-6.
- =abs_tol=
     The absolute tolerance for numerical integration, default to 1.0E-6.
- =max_step=
     The maximum number of steps in numerical integration, default to $10^6$.
- =as_rel_tol=
     The relative tolerance for algebra solver for steady state solution, default to 1.0E-6.
- =as_abs_tol=
     The absolute tolerance for algebra solver for steady state solution, default to 1.0E-6.
- =as_max_step=
     The maximum number of interations in algebra solver for steady state solution, default to $10^2$.
*** Return value
    An =nCmt=-by-=nt= matrix, where =nt= is the total size of
    events $\sum_{i}n_i$.
*** Note
   :PROPERTIES:
   :CUSTOM_ID: sec:ode_pop_note
   :END:
    - Similar to single-subject solvers, three numerical integrator are provided:
      + =pmx_solve_group_adams=: Adams-Moulton method,
      + =pmx_solve_group_bdf=: Backward-differentiation formular,
      + =pmx_solve_group_rk45=: Runge-Kutta 4/5 method.
    - With optional arguments indicated by square bracket, the following calls are allowed:
#+BEGIN_SRC stan
  pmx_solve_group_[adams || rk45 || bdf](..., theta);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, rel_tol, abs_tol, max_step);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, rel_tol, abs_tol, max_step, as_rel_tol, as_abs_tol, as_max_step);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, rel_tol, abs_tol, max_step);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, rel_tol, abs_tol, max_step, as_rel_tol, as_abs_tol, as_max_step);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, tlag);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, tlag, rel_tol, abs_tol, max_step);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, tlag, rel_tol, abs_tol, max_step, as_rel_tol, as_abs_tol, as_max_step);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r, rel_tol, abs_tol, max_step);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r, rel_tol, abs_tol, max_step, as_rel_tol, as_abs_tol, as_max_step);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r, x_i);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r, x_i, rel_tol, abs_tol, max_step);
  pmx_solve_group_[adams || rk45 || bdf](..., theta, biovar, tlag, x_r, x_i, rel_tol, abs_tol, max_step, as_rel_tol, as_abs_tol, as_max_step);
#+END_SRC
    - The group solvers support paralleisation through Message Passing
      Interface(MPI). One can access this feature through =cmdstan= or
      =cmdstanr= interface.
#+BEGIN_SRC bash
  # cmdstan interface user need to add "TORSTEN_MPI=1" and
  # "TBB_CXX_TYPE=gcc" in "cmdstan/make/local" file. In linux & macos
  # this can be done as
  echo "TORSTEN_MPI=1" > cmdstan/make/local
  echo "TBB_CXX_TYPE=gcc" > cmdstan/make/local # "gcc" should be replaced by user's C compiler
  make path-to-model/model_name
  mpiexec -n number_of_processes model_name sample... # additional cmdstan options
#+END_SRC
#+BEGIN_SRC r
  library("cmdstanr")
  cmdstan_make_local(cpp_options = list("TORSTEN_MPI" = "1", "TBB_CXX_TYPE"="gcc"))  # "gcc" should be replaced by user's C compiler
  rebuild_cmdstan()
  mod <- cmdstan_model(path-to-model-file, quiet=FALSE, force_recompile=TRUE)
  f <- mod$sample_mpi(data = ..., chains = 1, mpi_args = list("n" = number_of_processes), refresh = 200)
#+END_SRC
  Here $n$ denotes number of MPI processes, so that $N$
  ODE systems (each specified by a same RHS function and
  subject-dependent events) are distributed to and solved by $n$
  processes evenly. Note that to access this feature user must have
  MPI installed, and some MPI installation may require set additional
  compiler arguments, such as =CXXLFAGS= and =LDFLAGS=.

** ODE  integrator function
   :PROPERTIES:
   :EXPORT_FILE_NAME: ode-integ
   :EXPORT_DATE: <2021-06-28 Mon>
   :EXPORT_OPTIONS: toc:nil num:nil
   :END:
*** Description
Torsten provides its own implementation of ODE solvers that solves
\begin{equation*}
  y'(t) = f(t, y(t)), \quad y(t_0) = y_0
\end{equation*}
for $y$. These solvers
are customized for Torsten applications and different from those found
in Stan. The general ODE PMX solvers in previous sections are internally powered
by these functions.
*** Usage
#+INDEX: PMX ODE integrators
#+BEGIN_SRC stan
  real[ , ] pmx_integrate_ode_[ adams || bdf || rk45 ](ODE_rhs, real[] y0, real t0, real[] ts, real[] theta, real[] x_r, int[] x_i [ , real rtol, real atol, int max_step ]);
#+END_SRC
*** Arguments
- =ODE_rhs=
     Function that specifies the right-hand-side $f$.
     It should be defined in
     src_stan[:exports code]{functions} block and has the following format
#+BEGIN_SRC stan
  vector = f(real t, vector y, real[] param, real[] dat_r, int[] dat_i) {...}
#+END_SRC
     Here =t= is time, =y= the unknowns of ODE, =param= the parameters, =dat\_r= the real data, =dat\_i=
     the integer data.
- =y0=
     Initial condition $y_0$.
- =t0=
     Initial time $t_0$.
- =ts=
     Output time when solution is seeked.
- =theta=
     Parameters to be passed to =ODE_rhs= function.
- =x_r=
     Real data to be passed to =ODE_rhs= function.
- =x_i=
     Integer data to be passed to =ODE_rhs= function.
- =rtol=
     Relative tolerance, default to 1.e-6(=rk45=) and 1.e-8(=adams= and =bdf=).
- =atol=
     Absolute tolerance, default to 1.e-6(=rk45=) and 1.e-8(=adams= and =bdf=).
- =max_step=
     Maximum number of steps allowed between neighboring time in =ts=,
     default to 100000.
*** Return value
    An =n=-by-=nd= 2d-array, where =n= is the size of =ts=
    and =nd= the dimension of the system.
*** Note
    - Three numerical integrator are provided:
      + =pmx_integrate_ode_adams=: Adams-Moulton method,
      + =pmx_integrate_ode_bdf=: Backward-differentiation formular,
      + =pmx_integrate_ode_rk45=: Runge-Kutta 4/5 method.
      When not equipped with further understanding of the ODE system, as a
      rule of thumb we suggest user try
      =rk45= integrator first, =bdf=
      integrator when the system is suspected to be stiff, and
      =adams= when a non-stiff system needs to be solved
      with higher accuracy/smaller tolerance.

    - All three integrators support adaptive stepping. To achieve
      that, at step $i$ estimated error $e_i$ is calculated and
      compared with given tolerance so that
      \begin{equation}
        e_i < \Vert\text{rtol} \times \tilde{y} + \text{atol}\Vert
      \end{equation}
      Here $\tilde{y}$ is the numerical solution of $y$ at current
      step and $\Vert \cdot \Vert$ indicates certain norm. When the above check fails, the solver attempts
      to reduce step size and retry. The default values of =atol=,
      =rtol=, and =max_step= are
      based on Stan's ODE functions and should not be considered as
      optimal. User should make problem-dependent
      decision on =rtol= and =atol=,
      according to estimated scale of the unknowns, so that the error
      would not affect inference on statistical variance of quantities
      that enter the Stan model. In particular, when an unknown can be neglected
      below certain threshold without affecting the rest of
      the dynamic system, setting
      =atol= greater than that threshold will avoid
      spurious and error-prone computation. See
      cite:hindmarsh_cvodes_2020 and
      1.4 of cite:shampine_solving_2003 for details.

    - With optional arguments indicated by square bracket, the following calls are allowed:
#+BEGIN_SRC stan
  pmx_integrate_ode_[adams || rk45 || bdf](..., x_i);
  pmx_integrate_ode_[adams || rk45 || bdf](..., x_i, rel_tol, abs_tol, max_step);
#+END_SRC
     
** ODE group  integrator Function
   :PROPERTIES:
   :EXPORT_FILE_NAME: ode-group-integ
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
#+INDEX: PMX ODE group integrators
*** Description
All the preivous functions solves for a single ODE system. Torsten also
provides group modeling counterparts for ODE integrators. The
functions solve for a group of ODE systems that share an ODE RHS but with
different parameters. They have similar
signatures to single-ODE integration functions.
*** Usage
#+BEGIN_SRC stan
  matrix pmx_integrate_ode_group_[adams || rk45 || bdf](ODE_system, real[ , ] y0, real t0, int[] len, real[] ts, real[ , ] theta, real[ , ] x_r, int[ , ] x_i, [ real rtol, real atol, int max_step ] );
#+END_SRC
Here src_stan[:exports code]{[adams || rk45 || bdf]} indicates the
function name can be of any of the three suffixes. See Section [[*ODE integrator function]].
- =ODE_rhs=
     Function that specifies the right-hand-side $f$. See Section [[*ODE integrator function]].
- =y0=
     Initial condition $y_0$ for each subsystem in the group. The
     first dimension equals to the size of the group.
- =t0=
     Initial time $t_0$.
- =len=
     A vector that contains the number of output time points for each
     subsystem. The lenght of the vector equals to the size of the group.
- =ts=
     Output time when solution is seeked, consisting of
     =ts= of each subsystem concatenated.
- =theta=
     2d-array parameters to be passed to =ODE_rhs=
     function. Each row corresponds to one subsystem.
- =x_r=
     2d-array real data to be passed to =ODE_rhs= function.
     Each row corresponds to one subsystem.
- =x_i=
     2d-array integer data to be passed to =ODE_rhs= function.
     Each row corresponds to one subsystem.
- =rtol=
     Relative tolerance.
- =atol=
     Absolute tolerance.
- =max_step=
     Maximum number of steps allowed between neighboring time in =ts=.

*** Return value
    An =n=-by-=nd= matrix, where =n= is the size of =ts=
    and =nd= the dimension of the system.
*** Note
    - With optional arguments indicated by square bracket, the following calls are allowed:
#+BEGIN_SRC stan
  pmx_integrate_group_[adams || rk45 || bdf](..., x_i);
  pmx_integrate_group_[adams || rk45 || bdf](..., x_i, rel_tol, abs_tol, max_step);
#+END_SRC
    - The group integrators support paralleisation through Message Passing
      Interface(MPI). One can access this feature through =cmdstan= or
      =cmdstanr= interface.
#+BEGIN_SRC bash
  # cmdstan interface user need to add "TORSTEN_MPI=1" and
  # "TBB_CXX_TYPE=gcc" in "cmdstan/make/local" file. In linux & macos
  # this can be done as
  echo "TORSTEN_MPI=1" > cmdstan/make/local
  echo "TBB_CXX_TYPE=gcc" > cmdstan/make/local # "gcc" should be replaced by user's C compiler
  make path-to-model/model_name
  mpiexec -n number_of_processes model_name sample... # additional cmdstan options
#+END_SRC
#+BEGIN_SRC r
  library("cmdstanr")
  cmdstan_make_local(cpp_options = list("TORSTEN_MPI" = "1", "TBB_CXX_TYPE"="gcc"))  # "gcc" should be replaced by user's C compiler
  rebuild_cmdstan()
  mod <- cmdstan_model(path-to-model-file, quiet=FALSE, force_recompile=TRUE)
  f <- mod$sample_mpi(data = ..., chains = 1, mpi_args = list("n" = number_of_processes), refresh = 200)
#+END_SRC
  Here $n$ denotes number of MPI processes, so that $N$
  ODE systems are distributed to and solved by $n$
  processes evenly. Note that to access this feature user must have
  MPI installed, and some MPI installation may require set additional
  compiler arguments, such as =CXXLFAGS= and =LDFLAGS=.

** Univariate integral
   :PROPERTIES:
   :EXPORT_HUGO_SECTION*: 1d_integ
   :EXPORT_FILE_NAME: 1d_integ
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
#+INDEX: univariate integral
#+BEGIN_SRC stan
  real univariate_integral_rk45(f, t0, t1, theta, x_r, x_i)
#+END_SRC
#+BEGIN_SRC stan
  real univariate_integral_bdf(f, t0, t1, theta, x_r, x_i)
#+END_SRC
Based on the ODE solver capability in Stan, Torsten provides functions
calculating the integral of a univariate function. The integrand function $f$ must follow the signature
#+BEGIN_SRC stan
    real f(real t, real[] theta, real[] x_r, int[] x_i) {
      /* ... */
  }
#+END_SRC

** Piecewise linear interpolation
   :PROPERTIES:
   :EXPORT_HUGO_SECTION*: pc_lin_interp
   :EXPORT_FILE_NAME: pc_lin_interp
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
#+INDEX: linear interpolation
#+BEGIN_SRC stan
real linear_interpolation(real xout, real[] x, real[] y)
#+END_SRC
#+BEGIN_SRC stan
real[] linear_interpolation(real[] xout, real[] x, real[] y)
#+END_SRC
Torsten also provides function =linear_interpolation= for piecewise linear interpolation over a
set of x, y pairs. It returns the values of a piecewise linear
function at specified values =xout= of the first function argument. The
function is specified in terms of a set of x, y
pairs. Specifically, =linear_interpolation= implements the following function
\begin{align*}
  y_{\text{out}} = \left\{\begin{array}{ll}
                 y_1, & x_{\text{out}} < x_1 \\
                 y_i + \frac{y_{i+1} - y_i}{x_{i+1} - x_i}
                 \left(x_{\text{out}} - x_i\right), & x_{\text{out}} \in [x_i, x_{i+1}) \\
                 y_n, & x_{\text{out}} \ge x_n 
                          \end{array}\right.
\end{align*}
- The x values must be in increasing order, i.e. $x_i < x_{i+1}$.
- All three arguments may be data or parameters.

* Examples
   :PROPERTIES:
   :EXPORT_HUGO_SECTION: example
   :EXPORT_FILE_NAME: _index
   :EXPORT_DATE: <2021-06-25 Fri>
   :END:
All the PMX models in this chapter can be found in
=Torsten/example-models= directory:
- [[https://github.com/metrumresearchgroup/Torsten/tree/master/example-models/pk2cpt][Two-compartment model]]
- [[https://github.com/metrumresearchgroup/Torsten/tree/master/example-models/pk2cpt_linode][Two-compartment model by linear ODEs]]
- [[https://github.com/metrumresearchgroup/Torsten/tree/master/example-models/pk2cpt_ode][two-compartment model by numerical ODEs]]
- [[https://github.com/metrumresearchgroup/Torsten/tree/master/example-models/FK_coupled][Joint PK/PD model]]
- [[https://github.com/metrumresearchgroup/Torsten/tree/master/example-models/twocpt_population][Two-compartment popPK model]]
- [[https://github.com/metrumresearchgroup/Torsten/tree/master/example-models/lotka_volterra_ode_group_model][Group of ODEs]]
- [[https://github.com/metrumresearchgroup/Torsten/tree/master/example-models/effCpt][Effective compartment model]]
- [[https://github.com/metrumresearchgroup/Torsten/tree/master/example-models/FribergKarlsson][PopPKPD model]]

** Two-compartment model for single patient
   :PROPERTIES:
   :EXPORT_FILE_NAME: twocpt
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:nil num:nil
   :END:
  We model drug absorption in a single patient and simulate plasma drug concentrations:

  - Multiple Doses: 1250 mg, every 12 hours, for a total of 15 doses
  - PK measured at 0.083, 0.167, 0.25, 0.5, 0.75, 1, 1.5, 2, 4, 6,
    8, 10 and 12 hours after 1st, 2nd, and 15th dose. In addition, the
    PK is measured every 12 hours throughout the trial.

  With the plasma concentration $\hat{c}$ using
  [[*Two Compartment Model]], we simulate $c$ according to:
  \begin{align*}
    \log\left(c\right) &\sim N\left(\log\left(\widehat{c}\right),\sigma^2\right) \\
    \left(CL, Q, V_2, V_3, ka\right) &= \left(5\ {\rm L/h}, 8\  {\rm L/h}, 20\  {\rm L},  70\ {\rm L}, 1.2\ {\rm h^{-1}} \right) \\
    \sigma^2 &= 0.01
  \end{align*}
  The data are generated using the R package =mrgsolve= cite:Baron000.

Code below shows how Torsten function =pmx_solve_twocpt= can be used to fit the above model.

#+include: "../example-models/pk2cpt/pk2cpt.stan" :lines "5-68" src stan

#+BEGIN_SRC R :results output silent :exports none
  setwd("~/Work/Torsten_debug/example-models/R")
  source("TwoCpt.R")                      #
#+END_SRC

Four MCMC chains of 2000 iterations (1000 warmup iterations and 1000
sampling iterations) are simulated. 1000 samples per chain were used for the subsequent analyses.
The MCMC history plots(Figure [[twocpt_mcmc_history]])
suggest that the 4 chains have converged to common distributions for
all of the key model parameters. The fit to the plasma concentration
data (Figure [[twocpt_mcmc_predict]]) are in close agreement with the
data, which is not surprising since the fitted model is identical to
the one used to simulate the data. Similarly the parameter posterior
density can be examined in Figure [[twocpt_mcmc_posterior]] and shows
consistency with the values used for simulation. Another way to
summarize the posterior is through =cmdstanr='s =summary= method.

#+BEGIN_SRC r
## fit is a CmdStanMCMC object returned by sampling. See cmdstanr reference.
> pars = c("CL", "Q", "V1", "V2", "ka", "sigma")
> fit$summary(pars)
# A tibble: 6 x 10
  variable   mean median     sd    mad      q5    q95  rhat ess_bulk ess_tail
  <chr>     <dbl>  <dbl>  <dbl>  <dbl>   <dbl>  <dbl> <dbl>    <dbl>    <dbl>
1 CL        4.82   4.83  0.0910 0.0870  4.68    4.97   1.00    1439.    1067.
2 Q         7.56   7.55  0.588  0.586   6.61    8.56   1.00    1256.    1235.
3 V1       21.1   21.1   2.50   2.45   17.1    25.3    1.00    1057.    1177.
4 V2       76.1   76.1   5.33   4.93   67.5    84.9    1.01    1585.    1372.
5 ka        1.23   1.23  0.175  0.174   0.958   1.52   1.00    1070.    1122.
6 sigma     0.109  0.108 0.0117 0.0111  0.0911  0.130  1.01    1414.     905.
#+END_SRC

:hugo:
#+CAPTION: MCMC history plots for the parameters of a two compartment model with first order absorption (each color corresponds to a different chain)
#+NAME: twocpt_mcmc_history
#+attr_html: :width 700
[[file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/3c631dfd81f008a275a7b5b74c8c7bb80f6deacb/example-models/pk2cpt/deliv/figure/history.png]]
:END:
:latex:
#+CAPTION: MCMC history plots for the parameters of a two compartment model with first order absorption (each color corresponds to a different chain)
#+NAME: twocpt_mcmc_history
#+ATTR_LATEX: :width \linewidth
[[../example-models/pk2cpt/deliv/figure/history.pdf]]
:END:

:hugo:
#+CAPTION: Posterior marginal densities of the Model Parameters of a two compartment model with first order absorption (each color corresponds to a different chain)
#+NAME: twocpt_mcmc_posterior
#+attr_html: :width 700
[[file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/3c631dfd81f008a275a7b5b74c8c7bb80f6deacb/example-models/pk2cpt/deliv/figure/density.png]]
:END:
:latex:
#+CAPTION: Posterior marginal densities of the Model Parameters of a two compartment model with first order absorption (each color corresponds to a different chain)
#+NAME: twocpt_mcmc_posterior
#+ATTR_LATEX: :width \linewidth
[[../example-models/pk2cpt/deliv/figure/density.pdf]]
:END:

:hugo:
#+CAPTION: Predicted ($y_{\text{rep}}$) and observed ($y$) plasma drug concentrations of a two compartment model with first order absorption. $y_{\text{rep}}$ is shown with posterior median, 50%, 90% credible intervals.
#+NAME: twocpt_mcmc_predict
#+attr_html: :width 700
[[file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/3c631dfd81f008a275a7b5b74c8c7bb80f6deacb/example-models/pk2cpt/deliv/figure/ppc_ribbon.png]]
:END:
:latex:
#+CAPTION: Predicted ($y_{\text{rep}}$) and observed ($y$) plasma drug concentrations of a two compartment model with first order absorption. $y_{\text{rep}}$ is shown with posterior median, 50%, 90% credible intervals.
#+NAME: twocpt_mcmc_predict
#+ATTR_LATEX: :width 0.5\linewidth
[[../example-models/pk2cpt/deliv/figure/ppc_ribbon.pdf]]
:END:

** Two-compartment model as a linear ODE model for single patient 
   :PROPERTIES:
   :EXPORT_FILE_NAME: twocpt-lin
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
Using =pmx_solve_linode=, the following example fits a two-compartment model
with first order absorption. We omit src_stan[:exports code]{data} and
src_stan[:exports code]{model} block as they are identical to [[*Two-compartment model for single patient]] Example.

#+include: "../example-models/pk2cpt_linode/pk2cpt_linode.stan" :lines "23-70" src stan

** Two-compartment model solved by numerical integrator for single patient 
   :PROPERTIES:
   :EXPORT_FILE_NAME: twocpt-ode
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
Using =pmx_solve_rk45=, the following example fits a two-compartment model
with first order absorption. User-defined function
=ode_rhs= describes the RHS of the ODEs. 
#+include: "../example-models/pk2cpt_ode/pk2cpt_ode.stan" :lines "1-22" src stan

We omit src_stan[:exports code]{data} and
src_stan[:exports code]{model} block as they are identical to [[*Two-compartment model for single patient]] Example.

#+include: "../example-models/pk2cpt_ode/pk2cpt_ode.stan" :lines "41-78" src stan

** Joint PK-PD model
   :PROPERTIES:
   :EXPORT_FILE_NAME: pkpd
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :CUSTOM_ID: sec:fk_model
   :EXPORT_OPTIONS: toc:nil num:nil
   :END:
#+INDEX: Friberg-Karlsson Model
   Neutropenia is observed in patients receiving an ME-2 drug. Our goal
   is to model the relation between neutrophil counts and drug
   exposure. As shown in Figure [[fig:FK_model]], the Friberg-Karlsson Semi-Mechanistic model cite:friberg_mechanistic_2003 couples
   a PK model with a PD
   effect to describe a delayed feedback mechanism that keeps the
   absolute neutrophil count (ANC) at the
   baseline in a circulatory compartment (Circ), and
   the drug's effect in
   reducing the proliferation rate (prol).
   The delay between prol and Circ is modeled using $n$ transit
   comparments with mean transit time MTT = $(n + 1)/k_{\text{tr}}$,
   with $k_{\text{tr}}$ the transit rate constant. In the current
   example, we use the [[*Two Compartment Model]] for
   PK model, and set $n = 3$.

\begin{align}
  \log(\text{ANC})& \sim N(\log(y_{\text{circ}}), \sigma^2_{\text{ANC}}),  \\
  y_{\text{circ}}& = f_{\text{FK}}(\text{MTT}, \text{Circ}_{0}, \alpha, \gamma, c),
\end{align}
  where $c$ is the drug concentration calculated from the PK model, and function $f_{\text{FK}}$ represents solving the following
nonlinear ODE for $y_{\text{circ}}$ 
  \begin{align}\label{eq:FK}
    \frac{dy_\mathrm{prol}}{dt} &= k_\mathrm{prol} y_\mathrm{prol} (1 - E_\mathrm{drug})\left(\frac{\text{Circ}_0}{y_\mathrm{circ}}\right)^\gamma - k_\mathrm{tr}y_\mathrm{prol}, \\
    \frac{dy_\mathrm{trans1}}{dt} &= k_\mathrm{tr} y_\mathrm{prol} - k_\mathrm{tr} y_\mathrm{trans1}, \\
    \frac{dy_\mathrm{trans2}}{dt} &= k_\mathrm{tr} y_\mathrm{trans1} - k_\mathrm{tr} y_\mathrm{trans2},  \\
    \frac{dy_\mathrm{trans3}}{dt} &= k_\mathrm{tr} y_\mathrm{trans2} - k_\mathrm{tr} y_\mathrm{trans3},  \\
    \frac{dy_\mathrm{circ}}{dt} &= k_\mathrm{tr} y_\mathrm{trans3} - k_\mathrm{tr} y_\mathrm{circ},
  \end{align}
We use $E_{\text{drug}} = \alpha c$ to model the linear effect of drug
concentration in central compartment, with
$c=y_{\text{cent}}/V_{\text{cent}}$ based on PK solutions.

Since the ODEs specifying the Two Compartment Model
(Equation \eqref{eq:twocpt}) do not depend on the PD ODEs
(Equation \eqref{eq:FK}) and can be solved analytically
using Torsten's src_stan[:exports code]{pmx_solve_twocpt} function
we can specify solve the system using a coupled solver function. We do not
expect our system to be stiff and use the Runge-Kutta 4th/5th order
integrator.

:hugo:
#+CAPTION: Friberg-Karlsson semi-mechanistic Model.
#+NAME: fig:FK_model
#+attr_html: :width 700
[[file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/master/docs/graphics/neutrophilModel.jpg]]
:END:
:latex:
#+CAPTION: Friberg-Karlsson semi-mechanistic Model.
#+NAME: fig:FK_model
#+ATTR_LATEX: :width 0.8\textwidth
[[file:./graphics/neutrophilModel.jpg]]
:END:


The model fitting is based on simulated data
\begin{align*}
  (\text{MTT}, \text{Circ}_{0}, \alpha, \gamma, k_{\text{tr}})& = (125, 5.0, 3 \times 10^{-4}, 0.17) \\
  \sigma^2_{\text{ANC}}& = 0.001.
\end{align*}

#+include: "../example-models/FK_coupled/FribergKarlsson.stan" src stan

** Two-compartment population model
   :PROPERTIES:
   :EXPORT_FILE_NAME: twocp-pop
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
Using =pmx_solve_group_bdf=, the following example fits a
two-compartment population model.

#+include: "../example-models/twocpt_population/twocpt_population.stan" :lines "1-145" src stan

When the above model is compiled with MPI support(see Section
[[#mpi-support][MPI support]]), one can run it using within-chain parallelization:
#+BEGIN_SRC bash
mpiexec -n nproc ./twocpt_population sample data file=twocpt_population.data.R init=twocpt_population.init.R
#+END_SRC
Here src_sh[:exports code]{nproc} indicates the number of parallel
processes participating ODE solution. For example, with
src_stan[:exports code]{np=8} for a population of 8,
src_sh[:exports code]{nproc=4} indicates solving 8 subjects' ODEs in
parallel, with each process solving 2 subjects.

** Lotka-Volterra group model
   :PROPERTIES:
   :EXPORT_FILE_NAME: ode-group
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
Using =pmx_integrate_ode_group_rk45=, the following example fits
a Lotka-Volterra group model, based on [[https://mc-stan.org/users/documentation/case-studies/lotka-volterra-predator-prey.html][Stan's case study]].

#+include: "../example-models/lotka_volterra_ode_group_model/lv_group.stan" :lines "1-57" src stan

** Univariate integral of a quadratic function
   :PROPERTIES:
   :EXPORT_FILE_NAME: 1d-intg
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
integral of a quadratic function.
This example shows how to use =univariate_integral_rk45= to calculate the
integral of a quadratic function.
#+BEGIN_SRC stan
  functions {
    real fun_ord2(real t, real[] theta, real[] x_r, int[] x_i) {
      real a = 2.3;
      real b = 2.0;
      real c = 1.5;
      real res;
      res = a + b * t + c * t * t;
      return res;
    }
  }
  data {
    real t0;
    real t1;
    real dtheta[2];
    real x_r[0];
    int x_i[0];
  }
  transformed data {
    real univar_integral;
    univar_integral = univariate_integral_rk45(func, t0, t1, dtheta, 
                            x_r, x_i);
  }
  /* ... */
#+END_SRC

** Linear intepolation
   :PROPERTIES:
   :EXPORT_FILE_NAME: lin-interp
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
This example illustrates how to use =linear_intepolationi=
to fit a piecewise linear function to a data set consisting
of $(x, y)$ pairs.
#+BEGIN_SRC stan
data{
  int nObs;
  real xObs[nObs];
  real yObs[nObs];
  int nx;
  int nPred;
  real xPred[nPred];
}

transformed data{
  real xmin = min(xObs);
  real xmax = max(xObs);
}

parameters{
  real y[nx];
  real<lower = 0> sigma;
  simplex[nx - 1] xSimplex;
}

transformed parameters{
  real yHat[nObs];
  real x[nx];

  x[1] = xmin;
  x[nx] = xmax;
  for(i in 2:(nx-1))
    x[i] = x[i-1] + xSimplex[i-1] * (xmax - xmin);

  yHat = linear_interpolation(xObs, x, y);
}

model{
  xSimplex ~ dirichlet(rep_vector(1, nx - 1));
  y ~ normal(0, 25);
  yObs ~ normal(yHat, sigma);
}

generated quantities{
  real yHatPred[nPred];
  real yPred[nPred];

  yHatPred = linear_interpolation(xPred, x, y);
  for(i in 1:nPred)
    yPred[i] = normal_rng(yHatPred[i], sigma);
}
#+END_SRC

** Effect Compartment Population Model
   :PROPERTIES:
   :EXPORT_FILE_NAME: effcpt
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
Here we expand the [[*Two-compartment model for single patient]] to a population model fitted to the
combined data from phase I and phase IIa studies. The
parameters exhibit inter-individual variations (IIV), due to
both random effects and to the patients' body weight,
treated as a covariate and denoted $bw$.
*** Population Model for Plasma Drug Concentration $c$
\begin{gather*}
  \log\left(c_{ij}\right) \sim N\left(\log\left(\widehat{c}_{ij}\right),\sigma^2\right), \\
  \widehat{c}_{ij} = f_{2cpt}\left(t_{ij},D_j,\tau_j,CL_j,Q_j,V_{1j},V_{2j},k_{aj}\right), \\
  \log\left(CL_j,Q_j,V_{ssj},k_{aj}\right) \sim N\left(\log\left(\widehat{CL}\left(\frac{bw_j}{70}\right)^{0.75},\widehat{Q}\left(\frac{bw_j}{70}\right)^{0.75}, \widehat{V}_{ss}\left(\frac{bw_j}{70}\right),\widehat{k}_a\right),\Omega\right), \\
  V_{1j} = f_{V_1}V_{ssj}, \\
  V_{2j} = \left(1 - f_{V_1}\right)V_{ssj}, \\
  \left(\widehat{CL},\widehat{Q},\widehat{V}_{ss},\widehat{k}_a, f_{V_1}\right) = \left(10\ {\rm L/h},15\  {\rm L/h},140\  {\rm L},2\ {\rm h^{-1}}, 0.25 \right), \\
  \Omega = \left(\begin{array}{cccc} 0.25^2 & 0 & 0 & 0 \\ 0 & 0.25^2 & 0 & 0 \\
                    0 & 0 & 0.25^2 & 0 \\ 0 & 0 & 0 & 0.25^2  \end{array}\right), \\
  \sigma = 0.1
\end{gather*}

Furthermore we add a fourth compartment in which we measure
a PD effect(Figure [[eff_model]]).

:hugo:
#+CAPTION: Effect Compartment Model
#+NAME: eff_model
#+attr_html: :width 400
[[file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/master/docs/graphics/effCptModel.png]]
:END:
:latex:
#+CAPTION: Effect Compartment Model
#+NAME: eff_model
#+ATTR_LATEX: :width 0.5\textwidth
[[file:./graphics/effCptModel.png]]
:END:


*** Effect Compartment Model for PD response $R$.
\begin{gather*}
R_{ij} \sim N\left(\widehat{R}_{ij},\sigma_{R}^2\right), \\
\widehat{R}_{ij} = \frac{E_{max}c_{eij}}{EC_{50j} + c_{eij}}, \\
c_{e\cdot j}^\prime = k_{e0j}\left(c_{\cdot j} - c_{e\cdot j}\right), \\
\log\left(EC_{50j}, k_{e0j}\right) \sim N\left(\log\left(\widehat{EC}_{50}, \widehat{k}_{e0}\right),\Omega_R\right), \\
\left(E_{max}, \widehat{EC}_{50},\widehat{k}_{e0}\right) = \left(100, 100.7, 1\right), \\
\Omega_R = \left(\begin{array}{cc} 0.2^2 & 0 \\ 0 & 0.25^2  \end{array}\right), \ \ \ \sigma_R = 10.
\end{gather*}

The PK and the PD data are simulated using the following
treatment.
- Phase I study
  + Single dose and multiple doses
  + Parallel dose escalation design
  + 25 subjects per dose
  + Single doses: 5, 10, 20, and 40 mg 
  + PK: plasma concentration of parent drug ($c$)
  + PD response: Emax function of effect compartment concentration ($R$)
  + PK and PD measured at 0.125, 0.25, 0.5, 0.75, 1, 2, 3, 4, 6, 8, 12, 18, and 24 hours
- Phase IIa trial in patients
  + 100 subjects
  + Multiple doses: 20 mg
  + sparse PK and PD data (3-6 samples per patient)

The model is simultaneously fitted to the PK and the PD
data. For this effect compartment model, we construct a
constant rate matrix and use =pmx_solve_linode=. Correct use of
Torsten requires the user pass the entire event history
(observation and dosing events) for an individual to the
function. Thus the Stan model shows the call to =pmx_solve_linode=
within a loop over the individual subjects rather than over
the individual observations. Note that the correlation matrix $\rho$ does not explicitly appear
in the model, but it is used to construct $\Omega$, which parametrizes
the PK IIV. 

#+include: "../example-models/effCpt/effCpt.stan" :lines "1-141" src stan

*** Results
We use the same diagnosis tools as for the
previous examples. Table [[effCptModelParms]] summarises the
statistics and diagnostics of the parameters. In particular, =rhat=
for all parameters being close to 1.0 indicates convergence of the 4
chains. Figure [[effcpt_mcmc_density]] shows the posterior density of
the parameters.

Posterior prediction check (PPC) in Figure
[[effcpt_ppc_5mg]] - [[effcpt_ppc_study_2_20mg]] show that the fits to the plasma concentration
are in close agreement with the data, notably for the sparse data case (phase IIa study). The fits
to the PD data (Figure [[effcpt_ppc_resp_5mg]] - [[effcpt_ppc_resp_study_2_20mg]]) look
reasonable considering data being more noisy so the model
produces larger credible intervals. Both the summary table and PPC
plots show that the estimated values of the
parameters are consistent with the values used to simulate the data.

# import from "summary_pars.csv"
#+CAPTION: Summary of the MCMC simulations of the marginal posterior distributions of the model parameters for the effect compartment model example.
#+ATTR_LATEX: :font \footnotesize :align  r r r r r r r r r r r
#+NAME: effCptModelParms
| variable  |    mean |  median |    sd |   mad |     q5 |     q95 |  rhat | ess_bulk | ess_tail |
|-----------+---------+---------+-------+-------+--------+---------+-------+----------+----------|
| CLHat     |  10.121 |  10.120 | 0.195 | 0.192 |  9.797 |  10.445 | 1.007 |  319.942 |  630.619 |
| QHat      |  14.858 |  14.853 | 0.347 | 0.344 | 14.301 |  15.432 | 1.000 | 1106.126 | 1712.821 |
| V1Hat     |  34.493 |  34.516 | 1.004 | 0.995 | 32.814 |  36.086 | 1.004 |  671.777 | 1563.396 |
| V2Hat     | 103.269 | 103.291 | 2.876 | 2.878 | 98.568 | 108.019 | 1.002 | 1689.165 | 2580.382 |
| kaHat     |   1.968 |   1.969 | 0.076 | 0.074 |  1.843 |   2.087 | 1.001 | 1204.531 | 1747.427 |
| ke0Hat    |   1.102 |   1.100 | 0.046 | 0.045 |  1.030 |   1.180 | 1.001 | 4008.337 | 3167.030 |
| EC50Hat   |  99.512 |  99.542 | 2.124 | 2.098 | 95.981 | 102.987 | 1.000 | 2557.436 | 2773.519 |
| omega[1]  |   0.268 |   0.267 | 0.016 | 0.016 |  0.242 |   0.295 | 1.008 |  594.842 |  978.297 |
| omega[2]  |   0.229 |   0.228 | 0.021 | 0.021 |  0.195 |   0.264 | 1.002 | 1245.453 | 1966.911 |
| omega[3]  |   0.212 |   0.211 | 0.029 | 0.029 |  0.165 |   0.261 | 1.005 |  623.820 | 1692.248 |
| omega[4]  |   0.263 |   0.262 | 0.026 | 0.026 |  0.221 |   0.306 | 1.002 | 1396.611 | 2260.425 |
| omega[5]  |   0.272 |   0.271 | 0.036 | 0.035 |  0.217 |   0.335 | 1.008 |  293.132 |  728.867 |
| rho[1,2]  |   0.197 |   0.200 | 0.100 | 0.101 |  0.029 |   0.360 | 1.003 | 1322.261 | 1955.862 |
| rho[1,3]  |  -0.161 |  -0.161 | 0.122 | 0.121 | -0.361 |   0.042 | 1.001 | 1609.160 | 2270.515 |
| rho[1,4]  |  -0.101 |  -0.105 | 0.107 | 0.107 | -0.270 |   0.083 | 1.001 | 1685.591 | 2353.498 |
| rho[1,5]  |   0.016 |   0.015 | 0.128 | 0.128 | -0.192 |   0.226 | 1.000 | 2039.767 | 2939.988 |
| rho[2,3]  |   0.091 |   0.092 | 0.144 | 0.148 | -0.143 |   0.328 | 1.008 |  718.187 | 1550.836 |
| rho[2,4]  |   0.186 |   0.190 | 0.125 | 0.125 | -0.025 |   0.384 | 1.005 |  948.704 | 1819.199 |
| rho[2,5]  |   0.146 |   0.145 | 0.157 | 0.161 | -0.111 |   0.402 | 1.003 |  626.620 | 1546.157 |
| rho[3,4]  |   0.815 |   0.827 | 0.093 | 0.094 |  0.646 |   0.947 | 1.010 |  309.098 |  736.635 |
| rho[3,5]  |  -0.318 |  -0.323 | 0.219 | 0.228 | -0.678 |   0.055 | 1.016 |  200.806 |  607.958 |
| rho[4,5]  |  -0.295 |  -0.299 | 0.161 | 0.162 | -0.551 |  -0.019 | 1.008 |  546.998 | 1151.092 |
| omegaKe0  |   0.265 |   0.265 | 0.047 | 0.047 |  0.188 |   0.346 | 1.001 | 1731.276 | 2049.892 |
| omegaEC50 |   0.216 |   0.216 | 0.020 | 0.020 |  0.182 |   0.249 | 1.001 | 1599.567 | 1844.056 |
| sigma     |   0.099 |   0.099 | 0.002 | 0.002 |  0.095 |   0.103 | 1.002 | 1726.283 | 2836.027 |
| sigmaResp |  10.165 |  10.166 | 0.198 | 0.198 |  9.844 |  10.495 | 1.002 | 4788.527 | 2923.203 |
#+TBLFM: $2=$0;%0.3f::$3=$0;%0.3f::$4=$0;%0.3f::$5=$0;%0.3f::$6=$0;%0.3f::$7=$0;%0.3f::$8=$0;%0.3f::$9=$0;%0.3f::$10=$0;%0.3f

:hugo:
#+CAPTION: Posterior marginal densities of the model parameters of the effect compartment model.
#+NAME: effcpt_mcmc_density
#+attr_html: :width 700
[[file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/density.png]]
:END:
:latex:
#+CAPTION: Posterior marginal densities of the model parameters of the effect compartment model.
#+NAME: effcpt_mcmc_density
#+ATTR_LATEX: :width 0.8\linewidth
[[../example-models/effCpt/density.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (90% credible interval and median) and observed individual plasma drug concentrations in study 1 (5mg dose).
#+NAME: effcpt_ppc_5mg
#+attr_html: :width 700
file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/ppc_study_1_5mg.png
:END:
:latex:
#+CAPTION: Predicted (90% credible interval and median) and observed individual plasma drug concentrations in study 1 (5mg dose).
#+NAME: effcpt_ppc_5mg
#+ATTR_LATEX: :width \linewidth
[[../example-models/effCpt/ppc_study_1_5mg.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (90% credible interval and median) and observed individual plasma drug concentrations in study 1 (10mg dose).
#+NAME: effcpt_ppc_10mg
#+attr_html: :width 700
file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/ppc_study_1_10mg.png
:END:
:latex:
#+CAPTION: Predicted (90% credible interval and median) and observed individual plasma drug concentrations in study 1 (10mg dose).
#+NAME: effcpt_ppc_10mg
#+ATTR_LATEX: :width \linewidth
[[../example-models/effCpt/ppc_study_1_10mg.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (90% credible interval and median) and observed individual plasma drug concentrations in study 1 (20mg dose).
#+NAME: effcpt_ppc_20mg
#+attr_html: :width 700
file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/ppc_study_1_20mg.png
:END:
:latex:
#+CAPTION: Predicted (90% credible interval and median) and observed individual plasma drug concentrations in study 1 (20mg dose).
#+NAME: effcpt_ppc_20mg
#+ATTR_LATEX: :width \linewidth
[[../example-models/effCpt/ppc_study_1_20mg.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (90% credible interval and median) and observed individual plasma drug concentrations in study 1 (40mg dose).
#+NAME: effcpt_ppc_40mg
#+attr_html: :width 700
file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/ppc_study_1_40mg.png
:END:
:latex:
#+CAPTION: Predicted (90% credible interval and median) and observed individual plasma drug concentrations in study 1 (40mg dose).
#+NAME: effcpt_ppc_40mg
#+ATTR_LATEX: :width \linewidth
[[../example-models/effCpt/ppc_study_1_40mg.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (90% credible interval and median) and observed individual plasma drug concentrations in study 2 (first 40 subjects).
#+NAME: effcpt_ppc_study_2_20mg
#+attr_html: :width 700
file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/ppc_study_2_20mg.png
:END:
:latex:
#+CAPTION: Predicted (90% credible interval and median) and observed individual plasma drug concentrations in study 2 (first 40 subjects).
#+NAME: effcpt_ppc_study_2_20mg
#+ATTR_LATEX: :width \linewidth
[[../example-models/effCpt/ppc_study_2_20mg.pdf]]
:END:

# PD

:hugo:
#+CAPTION: Predicted (90% credible interval and median) and observed individual PD response in study 1 (5mg dose).
#+NAME: effcpt_ppc_resp_5mg
#+attr_html: :width 700
file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/ppc_study_1_5mg_resp.png
:END:
:latex:
#+CAPTION: Predicted (90% credible interval and median) and observed individual PD response in study 1 (5mg dose).
#+NAME: effcpt_ppc_resp_5mg
#+ATTR_LATEX: :width \linewidth
[[../example-models/effCpt/ppc_study_1_5mg_resp.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (90% credible interval and median) and observed individual PD response in study 1 (10mg dose).
#+NAME: effcpt_ppc_resp_10mg
#+attr_html: :width 700
file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/ppc_study_1_10mg_resp.png
:END:
:latex:
#+CAPTION: Predicted (90% credible interval and median) and observed individual PD response in study 1 (10mg dose).
#+NAME: effcpt_ppc_resp_10mg
#+ATTR_LATEX: :width \linewidth
[[../example-models/effCpt/ppc_study_1_10mg_resp.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (90% credible interval and median) and observed individual PD response in study 1 (20mg dose).
#+NAME: effcpt_ppc_resp_20mg
#+attr_html: :width 700
file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/ppc_study_1_20mg_resp.png
:END:
:latex:
#+CAPTION: Predicted (90% credible interval and median) and observed individual PD response in study 1 (20mg dose).
#+NAME: effcpt_ppc_resp_20mg
#+ATTR_LATEX: :width \linewidth
[[../example-models/effCpt/ppc_study_1_20mg_resp.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (90% credible interval and median) and observed individual PD response in study 1 (40mg dose).
#+NAME: effcpt_ppc_resp_40mg
#+attr_html: :width 700
file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/ppc_study_1_40mg_resp.png
:END:
:latex:
#+CAPTION: Predicted (90% credible interval and median) and observed individual PD response in study 1 (40mg dose).
#+NAME: effcpt_ppc_resp_40mg
#+ATTR_LATEX: :width \linewidth
[[../example-models/effCpt/ppc_study_1_40mg_resp.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (90% credible interval and median) and observed individual PD response in study 2 (first 40 subjects).
#+NAME: effcpt_ppc_resp_study_2_20mg
#+attr_html: :width 700
file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/effCpt/ppc_study_2_20mg_resp.png
:END:
:latex:
#+CAPTION: Predicted (90% credible interval and median) and observed individual PD response in study 2 (first 40 subjects).
#+NAME: effcpt_ppc_resp_study_2_20mg
#+ATTR_LATEX: :width \linewidth
[[../example-models/effCpt/ppc_study_2_20mg_resp.pdf]]
:END:

** Friberg-Karlsson Semi-Mechanistic Population Model
   :PROPERTIES:
   :EXPORT_FILE_NAME: pkpd-pop
   :EXPORT_DATE: <2021-06-25 Fri>
   :EXPORT_OPTIONS: toc:t
   :END:
We now return to the example of [[*Joint PK-PD model]] and extend
it to a population model. While we recommend using the coupled
solver, and this time we solve it using group solver. We leave it
as an exercise to the reader to rewrite the model with
coupled solver.

*** Friberg-Karlsson Population Model for drug-induced myelosuppression ($ANC$)
\begin{gather*}
\log(ANC_{ij}) \sim N(Circ_{ij}, \sigma^2_{ANC}), \\
\log\left(MTT_j, Circ_{0j}, \alpha_j\right) \sim N\left(\log\left(\widehat{MTT}, \widehat{Circ_0}, \widehat{\alpha}\right), \Omega_{ANC}\right), \\
\left(\widehat{MTT}, \widehat{Circ}_0,\widehat{\alpha}, \gamma \right) = \left(125, 5, 2, 0.17\right), \\
\Omega_{ANC} = \left(\begin{array}{ccc} 0.2^2 & 0 & 0 \\ 0 & 0.35^2 & 0 \\ 0 & 0 & 0.2^2 \end{array}\right), \\
\sigma_{ANC} = 0.1, \\
\Omega_{PK} = \left(\begin{array}{ccccc} 0.25^2 & 0 &a 0 & 0 & 0 \\ 0 & 0.4^2 & 0 & 0 & 0 \\
0 & 0 & 0.25^2 & 0 & 0 \\ 0 & 0 & 0 & 0.4^2 & 0 \\ 0 & 0 & 0 & 0 & 0.25^2  \end{array}\right)
\end{gather*}
The PK and the PD data are simulated using the following treatment.
- Phase IIa trial in patients
   + Multiple doses: 80,000 mg
   + Parallel dose escalation design
   + 15 subjects
   + PK: plasma concentration of parent drug ($c$)
   + PD response: Neutrophil count ($ANC$)
   + PK measured at 0.083, 0.167, 0.25, 0.5, 0.75, 1, 2, 3, 4, 6, 8, 12, 18, and 24 hours
   + PD measured once every two days for 28 days.

Once again, we simultaneously fit the model to the PK and the PD
data. It pays off to construct informative priors. For instance, we could
fit the PK data first, as was done in  example 1, and get informative
priors on the PK parameters. The PD parameters are drug independent,
so we can use information from the neutropenia literature. In this
example, we choose to use strongly informative priors on both PK and PD
parameters.

The ODE is defined as 
#+include: "../example-models/FribergKarlsson/FribergKarlsson.stan" :lines "1-62" src stan

We use the =pmx_solve_group_rk45= function to
solve the entire population's events. 
#+include: "../example-models/FribergKarlsson/FribergKarlsson.stan" :lines "140-189" src stan

This allows us to use within-chain paralleleisation to reduce
simulation time. When run from cmdstan, each MPI run generates one
chain, and we use 4 MPI runs to generate 4 chains.
#+BEGIN_SRC bash
  # chain 1
  mpiexec -n nproc ./FribergKarlsson sample adapt delta=0.95 data file=fribergkarlsson.data.R init=fribergkarlsson.init.R random seed=8765 id=1 output file=output.1.csv
  # chain 2
  mpiexec -n nproc ./FribergKarlsson sample adapt delta=0.95 data file=fribergkarlsson.data.R init=fribergkarlsson.init.R random seed=8765 id=2 output file=output.2.csv
  # chain 3
  mpiexec -n nproc ./FribergKarlsson sample adapt delta=0.95 data file=fribergkarlsson.data.R init=fribergkarlsson.init.R random seed=8765 id=3 output file=output.3.csv
  # chain 4
  mpiexec -n nproc ./FribergKarlsson sample adapt delta=0.95 data file=fribergkarlsson.data.R init=fribergkarlsson.init.R random seed=8765 id=4 output file=output.4.csv
#+END_SRC

*** Results
Table [[ref:FkpopModelParms]] summarizes the sampling and some diagnostics output.
estimation reflects the real value of the parameters (Table [[ref:FkpopModelParms]] and Figure [[ref:fkpop_mcmc_density]].
Similar to the previous example, PPCs shown in Figure [[ref:fkpop_ppc_pk]]
and [[ref:fkpop_ppc_pd]] indicate the model is a good fit.

# import from "summary_pars.csv"
#+CAPTION: Summary of the MCMC simulations of the marginal posterior distributions of the model parameters for the Friberg-Karlsson population model example.
#+ATTR_LATEX: :font \footnotesize :align  r r r r r r r r r r r
#+LABEL: FkpopModelParms
#+NAME: FkpopModelParms
| variable  |    mean |  median |       sd |      mad |      q5 |     q95 |  rhat | ess_bulk | ess_tail |
|-----------+---------+---------+----------+----------+---------+---------+-------+----------+----------|
| CLHat     |   9.539 |   9.535 |    0.522 |    0.487 |   8.692 |  10.401 | 1.006 |  971.369 | 1655.449 |
| QHat      |  15.401 |  15.386 |    1.018 |    1.000 |  13.742 |  17.090 | 1.000 | 2263.843 | 2447.006 |
| V1Hat     |  37.396 |  37.360 |    2.244 |    2.228 |  33.762 |  41.058 | 1.001 | 1936.476 | 2372.815 |
| V2Hat     | 101.698 | 101.394 |    6.503 |    6.119 |  91.529 | 112.538 | 1.001 | 2580.227 | 2592.925 |
| kaHat     |   1.997 |   1.997 |    0.074 |    0.074 |   1.873 |   2.115 | 1.001 | 7056.877 | 2993.406 |
| mttHat    | 113.681 | 113.204 |   11.506 |   10.910 |  95.807 | 133.514 | 1.001 | 4255.900 | 3269.646 |
| circ0Hat  |   4.760 |   4.752 |    0.241 |    0.229 |   4.375 |   5.163 | 1.002 | 3774.920 | 2783.663 |
| omega[1]  |   0.223 |   0.217 |    0.047 |    0.042 |   0.160 |   0.307 | 1.000 | 1751.864 | 2235.607 |
| omega[2]  |   0.339 |   0.329 |    0.073 |    0.067 |   0.239 |   0.473 | 1.001 | 2363.843 | 2607.056 |
| omega[3]  |   0.264 |   0.256 |    0.057 |    0.051 |   0.186 |   0.367 | 1.002 | 2128.660 | 2018.425 |
| omega[4]  |   0.257 |   0.249 |    0.056 |    0.051 |   0.182 |   0.361 | 1.003 | 2293.877 | 2937.673 |
| omega[5]  |   0.177 |   0.169 |    0.112 |    0.118 |   0.019 |   0.376 | 1.000 | 1550.483 | 2045.025 |
| omega[6]  |   0.188 |   0.183 |    0.044 |    0.041 |   0.127 |   0.269 | 1.000 | 2377.698 | 2965.713 |
| omega[7]  |   0.409 |   0.394 |    0.256 |    0.259 |   0.045 |   0.865 | 1.003 | 1386.987 | 2015.873 |
| gamma     |   0.171 |   0.168 |    0.035 |    0.033 |   0.121 |   0.235 | 1.000 | 8809.668 | 3189.676 |
| sigma     |   0.097 |   0.096 |    0.003 |    0.003 |   0.093 |   0.101 | 1.002 | 5436.508 | 2899.706 |
| sigmaNeut |   0.106 |   0.105 |    0.012 |    0.011 |   0.088 |   0.127 | 1.000 | 2809.059 | 3031.605 |
| alphaHat  | 2.24e-4 | 2.19e-4 | 3.97e-05 | 3.80e-05 | 1.66e-4 | 2.96e-4 | 1.000 | 5138.105 | 2807.328 |
#+TBLFM: $2=$0;%0.3f::$3=$0;%0.3f::$4=$0;%0.3f::$5=$0;%0.3f::$6=$0;%0.3f::$7=$0;%0.3f::$8=$0;%0.3f::$9=$0;%0.3f::$10=$0;%0.3f

:hugo:
#+CAPTION: Posterior marginal densities of the model parameters of the Friberg-Karlsson population model.
#+NAME: fkpop_mcmc_density
#+attr_html: :width 700
[[file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/FribergKarlsson/density.png]]
:END:
:latex:
#+CAPTION: Posterior marginal densities of the model parameters of the Friberg-Karlsson population model.
#+NAME: fkpop_mcmc_density
#+ATTR_LATEX: :width 0.8\linewidth
[[../example-models/FribergKarlsson/density.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (50%, 90% credible interval and median) and observed individual drug plasma concentration.
#+NAME: fkpop_ppc_pk
#+attr_html: :width 700
[[file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/FribergKarlsson/ppc_pk.png]]
:END:
:latex:
#+CAPTION: Predicted (50%, 90% credible interval and median) and observed individual drug plasma concentration.
#+NAME: fkpop_ppc_pk
#+ATTR_LATEX: :width 0.8\linewidth
[[../example-models/FribergKarlsson/ppc_pk.pdf]]
:END:

:hugo:
#+CAPTION: Predicted (50%, 90% credible interval and median) and observed individual Neutrophil counts.
#+NAME: fkpop_ppc_pd
#+attr_html: :width 700
[[file:https://raw.githubusercontent.com/metrumresearchgroup/Torsten/hugo_doc/example-models/FribergKarlsson/ppc_pd.png]]
:END:
:latex:
#+CAPTION: Predicted (50%, 90% credible interval and median) and observed individual Neutrophil counts.
#+NAME: fkpop_ppc_pd
#+ATTR_LATEX: :width 0.8\linewidth
[[../example-models/FribergKarlsson/ppc_pd.pdf]]
:END:

\appendix
* Compiling constants
  :PROPERTIES:
  :UNNUMBERED: t
  :END:
Several constants are used in Torsten's makefile. These constants can
be used in =cmdstan/make/local= file, or use =set_make_local= command
in =cmdstanr=.
- =TORSTEN_MPI=1= turns on within-chain parallelsation of MPI-enable
  functions. To use this option one must also point
  =TBB_CXX_TYPE= to proper C compiler. See also Section [[*General ODE-based Population Model Function]] and [[*ODE group integrator Function]].
- =TORSTEN_CVS_JAC_AD=1= makes BDF and Adams
  integrator use Stan's automatic differentiation to calculate
  Jacobian matrix in nonlinear solver cite:hindmarsh_cvodes_2020.

\printindex

\backmatter

<<bibliographystyle link>>
bibliographystyle:unsrt

<<bibliography link>>
bibliography:torsten.bib
