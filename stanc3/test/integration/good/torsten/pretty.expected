  $ ../../../../../install/default/bin/stanc --auto-format pmx_ln_interp.stan
data {
  int nObs;
  array[nObs] real xObs;
  array[nObs] real yObs;
  int nx;
  int nPred;
  array[nPred] real xPred;
}
transformed data {
  real xmin = min(xObs);
  real xmax = max(xObs);
}
parameters {
  array[nx] real y;
  real<lower=0> sigma;
  simplex[nx - 1] xSimplex;
}
transformed parameters {
  array[nObs] real yHat;
  array[nx] real x;
  
  x[1] = xmin;
  x[nx] = xmax;
  for (i in 2 : (nx - 1)) 
    x[i] = x[i - 1] + xSimplex[i - 1] * (xmax - xmin);
  
  for (i in 1 : nObs) {
    yHat[i] = pmx_ln_interpolate(xObs[i], x, y);
  }
  
  yHat = pmx_ln_interpolate(xObs, x, y);
}
model {
  
}

  $ ../../../../../install/default/bin/stanc --auto-format pmx_solve_group.stan
functions {
  vector ode(real t, vector y, array[] real theta, array[] real x,
             array[] int x_int) {
    vector[2] dydt;
    return dydt;
  }
}
data {
  int<lower=1> np;
  int<lower=1> nt;
  int nTheta;
  array[nt] int<lower=1> cmt;
  array[np] int len;
  array[nt] int evid;
  array[nt] int addl;
  array[nt] int ss;
  array[nt] real amt;
  array[nt] real time;
  array[nt] real rate;
  array[nt] real ii;
  
  int<lower=1> T;
  // real y0_d[2];
  // real t0;
  // real ts[T];
  array[1] real theta_d;
  // real x[0];
  // int x_int[0];
}
transformed data {
  int nCmt = 2;
  array[nt, nTheta] real theta_data;
  array[nt, nCmt] real biovar_data;
  array[nt, nCmt] real tlag_data;
  matrix[nCmt, nt * np] x_data;
  
  array[nt, 2] real x_r;
  array[nt, 3] int x_i;
  
  /*****************************************************************
   pmx_solve_rk45/adams/bdf full sig
   *****************************************************************/
  x_data = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_data, biovar_data,
                                tlag_data, 1e-8, 1e-8, 1e8);
  x_data = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_data, biovar_data,
                               tlag_data, 1e-8, 1e-8, 1e8);
  x_data = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_data, biovar_data,
                                 tlag_data, 1e-8, 1e-8, 1e8);
  
  /*****************************************************************
   pmx_solve_rk45/adams/bdf default tlag
   *****************************************************************/
  
  x_data = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_data, biovar_data, 1e-8,
                                1e-8, 1e8);
  x_data = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_data, biovar_data, 1e-8,
                               1e-8, 1e8);
  x_data = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_data, biovar_data,
                                 1e-8, 1e-8, 1e8);
  
  /*****************************************************************
   pmx_solve_rk45/adams/bdf default F & tlag
   *****************************************************************/
  
  x_data = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_data, 1e-8, 1e-8, 1e8);
  x_data = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_data, 1e-8, 1e-8, 1e8);
  x_data = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_data, 1e-8, 1e-8, 1e8);
  
  /*****************************************************************
   pmx_solve_group_rk45/adams/bdf w/o ODE controls
   *****************************************************************/
  x_data = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_data, biovar_data,
                                tlag_data);
  x_data = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_data, biovar_data,
                               tlag_data);
  x_data = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_data, biovar_data,
                                 tlag_data);
  
  /*****************************************************************
   pmx_solve_group_rk45/adams/bdf w/o ODE controls or tlag
   *****************************************************************/
  x_data = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_data, biovar_data);
  x_data = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_data, biovar_data);
  x_data = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_data, biovar_data);
  
  /*****************************************************************
   pmx_solve_group_rk45/adams/bdf w/o ODE controls or tlag
   *****************************************************************/
  x_data = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_data);
  x_data = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_data);
  x_data = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_data);
}
parameters {
  real y_p;
  
  array[2] real y0_p;
  array[1] real theta_p;
}
transformed parameters {
  array[nt, nTheta] real theta_parm;
  array[nt, nCmt] real biovar_parm;
  array[nt, nCmt] real tlag_parm;
  matrix[nCmt, nt * np] x_parm;
  
  /*****************************************************************
   pmx_solve_group_ode
   ****************************************************************/
  x_parm = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_parm, biovar_parm,
                                tlag_parm, 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_parm, biovar_parm,
                               tlag_parm, 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_parm, biovar_parm,
                                 tlag_parm, 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_parm, biovar_parm, 1e-8,
                                1e-8, 1e8);
  x_parm = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_parm, biovar_parm, 1e-8,
                               1e-8, 1e8);
  x_parm = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_parm, biovar_parm,
                                 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_parm, 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_parm, 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_parm, 1e-8, 1e-8, 1e8);
  
  /*****************************************************************
   pmx_solve_group_ode no ODE controls
   ****************************************************************/
  x_parm = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_parm, biovar_parm,
                                tlag_parm);
  x_parm = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_parm, biovar_parm,
                               tlag_parm);
  x_parm = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_parm, biovar_parm,
                                 tlag_parm);
  x_parm = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_parm, biovar_parm);
  x_parm = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_parm, biovar_parm);
  x_parm = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_parm, biovar_parm);
  x_parm = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_parm);
  x_parm = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_parm);
  x_parm = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_parm);
  
  /*****************************************************************
   pmx_solve_group_ode with data & w/o ODE controls
   ****************************************************************/
  x_parm = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_parm, biovar_parm,
                                tlag_parm, x_r, x_i);
  x_parm = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_parm, biovar_parm,
                                tlag_parm, x_r);
  x_parm = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_parm, biovar_parm,
                               tlag_parm, x_r, x_i);
  x_parm = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_parm, biovar_parm,
                               tlag_parm, x_r);
  x_parm = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_parm, biovar_parm,
                                 tlag_parm, x_r, x_i);
  x_parm = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_parm, biovar_parm,
                                 tlag_parm, x_r);
  
  x_parm = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_parm, biovar_parm,
                                tlag_parm, x_r, x_i, 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_rk45(ode, nCmt, len, time, amt, rate, ii, evid,
                                cmt, addl, ss, theta_parm, biovar_parm,
                                tlag_parm, x_r, 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_parm, biovar_parm,
                               tlag_parm, x_r, x_i, 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_bdf(ode, nCmt, len, time, amt, rate, ii, evid,
                               cmt, addl, ss, theta_parm, biovar_parm,
                               tlag_parm, x_r, 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_parm, biovar_parm,
                                 tlag_parm, x_r, x_i, 1e-8, 1e-8, 1e8);
  x_parm = pmx_solve_group_adams(ode, nCmt, len, time, amt, rate, ii, evid,
                                 cmt, addl, ss, theta_parm, biovar_parm,
                                 tlag_parm, x_r, 1e-8, 1e-8, 1e8);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format pmx_solve_linode.stan
data {
  // General data items
  int<lower=1> nID;
  int<lower=1> nt;
  int<lower=1> nObs;
  array[nObs] int<lower=1> iObs;
  array[nt] real<lower=0> amt;
  array[nt] int<lower=1> cmt;
  array[nt] int<lower=0> evid;
  array[nt] real<lower=0> rate;
  array[nt] real<lower=0> ii;
  array[nt] int<lower=0> addl;
  array[nt] int<lower=0> ss;
  array[nID] real<lower=0> weight;
  array[nID] int<lower=1> start;
  array[nID] int<lower=1> end;
  array[nt] real<lower=0> time;
  vector<lower=0>[nObs] cObs;
}
transformed data {
  // Integers required to specify dimensions
  int<lower=1> nRandom = 7; // Number of random effects
  int<lower=1> nCmt = 4; // Number of model compartments
  int<lower=1> nParms = 7; // Number of parameters passed to Torsten function
  
  // Fixed value parameters, e.g.,
  array[nCmt] real F = rep_array(1.0, nCmt);
  array[nCmt] real tLag = rep_array(0.0, nCmt);
}
parameters {
  // Population-level model parameters
  // These are the parameters for which you specify prior distributions
  // and initial estimates, e.g.,
  real<lower=0> CLHat;
  real<lower=10> V2Hat;
  real<lower=0> Q3Hat;
  real<lower=0> V3Hat;
  real<lower=0> Q4Hat;
  real<lower=0> V4Hat;
  real<lower=0> kaHat;
  real<lower=0> gammaCL;
  real<lower=0> gammaV2;
  
  //  corr_matrix[nRandom] rho;
  cholesky_factor_corr[2] L; // correlation only between CL & V2
  real<lower=0> omegaCL;
  real<lower=0> omegaV2;
  array[nRandom - 2] real<lower=0> omegasq;
  real<lower=0> sigma;
  
  // Individual-level model parameters directly sampled from the IIV
  // distribution
  //  vector[nRandom] logtheta[nID];
  matrix[nRandom, nID] eta;
}
transformed parameters {
  // Vector of PK parameter typical values -- only those with IIV
  vector<lower=0>[nRandom] thetaHat = [CLHat, V2Hat, Q3Hat, V3Hat, Q4Hat,
                                       V4Hat, kaHat]';
  
  // Matrix of individual-level model parameters
  matrix<lower=0>[nID, nRandom] theta;
  
  // Individual-level model parameters with recognizable names, e.g.,
  array[nID] real<lower=0> CL;
  array[nID] real<lower=0> V2;
  array[nID] real<lower=0> Q3;
  array[nID] real<lower=0> V3;
  array[nID] real<lower=0> Q4;
  array[nID] real<lower=0> V4;
  array[nID] real<lower=0> ka;
  
  vector<lower=0>[nRandom] omega;
  
  // Covariance matrix
  //  cov_matrix[nRandom] Omega;
  
  // Predicted concentrations (without residual variation)
  vector<lower=0>[nt] cHat; // All events
  
  // Amounts in each compartment at each event
  matrix[nCmt, nt] x;
  
  // Matrix used to pass parameters to the Torsten function
  matrix[nCmt, nCmt] K;
  
  omega[1] = omegaCL; // sd(log(CL))
  omega[2] = omegaV2; // sd(log(V2))
  omega[3] = sqrt(omegasq[1]); // sd((log(Q3)))
  omega[4] = sqrt(omegasq[2]); // sd((log(V3)))
  omega[5] = sqrt(omegasq[3]); // sd((log(Q4)))
  omega[6] = sqrt(omegasq[4]); // sd((log(V4)))
  omega[7] = sqrt(omegasq[5]); // sd((log(ka)))
  
  //  Omega = quad_form_diag(rho, omega); // diag_matrix(omega) * rho * diag_matrix(omega)
  theta[ : , 1 : 2] = (rep_matrix(thetaHat[1 : 2], nID)
                       .* exp(diag_pre_multiply(omega[1 : 2],
                                                L * eta[1 : 2,  : ])))';
  for (i in 3 : nRandom) 
    theta[ : , i] = thetaHat[i] * exp(omega[i] * eta[i,  : ])';
  
  for (j in 1 : nID) {
    // Calculation of individual parameter values given theta and covariates, e.g.
    CL[j] = theta[j, 1] * (weight[j] / 70) ^ gammaCL;
    V2[j] = theta[j, 2] * (weight[j] / 70) ^ gammaV2;
    Q3[j] = theta[j, 3] * (weight[j] / 70) ^ 0.75;
    V3[j] = theta[j, 4] * (weight[j] / 70);
    Q4[j] = theta[j, 5] * (weight[j] / 70) ^ 0.75;
    V4[j] = theta[j, 6] * (weight[j] / 70);
    ka[j] = theta[j, 7];
    
    // Pack individual PK parameters into K matrix, e.g.
    
    K = rep_matrix(0, nCmt, nCmt);
    
    K[1, 1] = -ka[j];
    K[2, 1] = ka[j];
    K[2, 2] = -(CL[j] + Q3[j] + Q4[j]) / V2[j];
    K[2, 3] = Q3[j] / V3[j];
    K[2, 4] = Q4[j] / V4[j];
    K[3, 2] = Q3[j] / V2[j];
    K[3, 3] = -Q3[j] / V3[j];
    K[4, 2] = Q4[j] / V2[j];
    K[4, 4] = -Q4[j] / V4[j];
    
    x[ : , start[j] : end[j]] = pmx_solve_linode(time[start[j] : end[j]],
                                                 amt[start[j] : end[j]],
                                                 rate[start[j] : end[j]],
                                                 ii[start[j] : end[j]],
                                                 evid[start[j] : end[j]],
                                                 cmt[start[j] : end[j]],
                                                 addl[start[j] : end[j]],
                                                 ss[start[j] : end[j]], K, F,
                                                 tLag);
    
    // Calculate target concentration for specified compartment.
    // Change compartment number and distribution volume as appropriate.
    
    cHat[start[j] : end[j]] = x[2, start[j] : end[j]]' ./ V2[j];
  }
}
model {
  
}
generated quantities {
  matrix[nRandom, nID] etaPred;
  matrix<lower=0>[nID, nRandom] thetaPred;
  corr_matrix[2] rho;
  vector<lower=0>[nt] cHatPred;
  vector[nt] cObsCond;
  vector[nt] cObsPred;
  
  // Individual-level model parameters with recognizable names, e.g.,
  array[nID] real<lower=0> CLPred;
  array[nID] real<lower=0> V2Pred;
  array[nID] real<lower=0> Q3Pred;
  array[nID] real<lower=0> V3Pred;
  array[nID] real<lower=0> Q4Pred;
  array[nID] real<lower=0> V4Pred;
  array[nID] real<lower=0> kaPred;
  
  matrix[nCmt, nt] xPred;
  matrix[nCmt, nCmt] KPred;
  
  rho = L * L';
  for (j in 1 : nID) 
    for (i in 1 : nRandom) 
      etaPred[i, j] = normal_rng(0, 1);
  
  thetaPred[ : , 1 : 2] = (rep_matrix(thetaHat[1 : 2], nID)
                           .* exp(diag_pre_multiply(omega[1 : 2],
                                                    L * etaPred[1 : 2,  : ])))';
  for (i in 3 : nRandom) 
    thetaPred[ : , i] = thetaHat[i] * exp(omega[i] * etaPred[i,  : ])';
  
  for (j in 1 : nID) {
    // Calculation of individual parameter values given theta and covariates, e.g.
    CLPred[j] = thetaPred[j, 1] * (weight[j] / 70) ^ gammaCL;
    V2Pred[j] = thetaPred[j, 2] * (weight[j] / 70) ^ gammaV2;
    Q3Pred[j] = thetaPred[j, 3] * (weight[j] / 70) ^ 0.75;
    V3Pred[j] = thetaPred[j, 4] * (weight[j] / 70);
    Q4Pred[j] = thetaPred[j, 5] * (weight[j] / 70) ^ 0.75;
    V4Pred[j] = thetaPred[j, 6] * (weight[j] / 70);
    kaPred[j] = thetaPred[j, 7];
    
    // Pack individual PK parameters into K matrix, e.g.
    
    KPred = rep_matrix(0, nCmt, nCmt);
    
    KPred[1, 1] = -kaPred[j];
    KPred[2, 1] = kaPred[j];
    KPred[2, 2] = -(CLPred[j] + Q3Pred[j] + Q4Pred[j]) / V2Pred[j];
    KPred[2, 3] = Q3Pred[j] / V3Pred[j];
    KPred[2, 4] = Q4Pred[j] / V4Pred[j];
    KPred[3, 2] = Q3Pred[j] / V2Pred[j];
    KPred[3, 3] = -Q3Pred[j] / V3Pred[j];
    KPred[4, 2] = Q4Pred[j] / V2Pred[j];
    KPred[4, 4] = -Q4Pred[j] / V4Pred[j];
    
    xPred[ : , start[j] : end[j]] = pmx_solve_linode(time[start[j] : end[j]],
                                                     amt[start[j] : end[j]],
                                                     rate[start[j] : end[j]],
                                                     ii[start[j] : end[j]],
                                                     evid[start[j] : end[j]],
                                                     cmt[start[j] : end[j]],
                                                     addl[start[j] : end[j]],
                                                     ss[start[j] : end[j]],
                                                     KPred, F, tLag);
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format pmx_solve_ode.stan
functions {
  vector ode_rhs(real t, vector x, array[] real parms, array[] real x_r,
                 array[] int x_i) {
    real CL = parms[1];
    real Q = parms[2];
    real V1 = parms[3];
    real V2 = parms[4];
    real ka = parms[5];
    real k10 = CL / V1;
    real k12 = Q / V1;
    real k21 = Q / V2;
    vector[3] y;
    y[1] = -ka * x[1];
    y[2] = ka * x[1] - (k10 + k12) * x[2] + k21 * x[3];
    y[3] = k12 * x[2] - k21 * x[3];
    return y;
  }
}
data {
  int<lower=1> nt; // number of events
  int<lower=1> nObs; // number of observation
  array[nObs] int<lower=1> iObs; // index of observation
  // NONMEM data
  array[nt] int<lower=1> cmt;
  array[nt] int evid;
  array[nt] int addl;
  array[nt] int ss;
  array[nt] real amt;
  array[nt] real time;
  array[nt] real rate;
  array[nt] real ii;
  // ODE control
  real rel_tol;
  real abs_tol;
  int max_num_steps;
  real as_rel_tol;
  real as_abs_tol;
  int as_max_num_steps;
}
parameters {
  real<lower=0> CL;
  real<lower=0> Q;
  real<lower=0> V1;
  real<lower=0> V2;
  real<lower=0> ka;
  real<lower=0> ke;
  real<lower=0> sigma;
}
transformed parameters {
  array[5] real theta; // ODE parameters
  array[3] real biovar;
  array[3] real tlag;
  array[nt, 5] real theta_t;
  array[nt, 3] real biovar_t;
  array[nt, 3] real tlag_t;
  row_vector<lower=0>[nt] cHat;
  matrix<lower=0>[3, nt] x;
  // all are vars
  theta[1] = CL;
  theta[2] = Q;
  theta[3] = V1;
  theta[4] = V2;
  theta[5] = ka;
  // full sig
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta, rel_tol, abs_tol, max_num_steps, as_rel_tol,
                     as_abs_tol, as_max_num_steps);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta, biovar, rel_tol, abs_tol, max_num_steps,
                     as_rel_tol, as_abs_tol, as_max_num_steps);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta, biovar, tlag, rel_tol, abs_tol, max_num_steps,
                     as_rel_tol, as_abs_tol, as_max_num_steps);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta, rel_tol, abs_tol, max_num_steps);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta, biovar, rel_tol, abs_tol, max_num_steps);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta, biovar, tlag, rel_tol, abs_tol, max_num_steps);
  // default ODE control
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta_t);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta_t, biovar_t);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta_t, biovar_t, tlag_t);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta_t, biovar);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta_t, biovar, tlag_t);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta, biovar_t);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta, biovar_t, tlag_t);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta_t, biovar_t);
  x = pmx_solve_rk45(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                     theta_t, biovar_t, tlag);
  // full sig
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta, rel_tol, abs_tol, max_num_steps, as_rel_tol,
                    as_abs_tol, as_max_num_steps);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta, biovar, rel_tol, abs_tol, max_num_steps,
                    as_rel_tol, as_abs_tol, as_max_num_steps);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta, biovar, tlag, rel_tol, abs_tol, max_num_steps,
                    as_rel_tol, as_abs_tol, as_max_num_steps);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta, rel_tol, abs_tol, max_num_steps);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta, biovar, rel_tol, abs_tol, max_num_steps);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta, biovar, tlag, rel_tol, abs_tol, max_num_steps);
  // default ODE control
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta_t);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta_t, biovar_t);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta_t, biovar_t, tlag_t);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta_t, biovar);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta_t, biovar, tlag_t);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta, biovar_t);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta, biovar_t, tlag_t);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta_t, biovar_t);
  x = pmx_solve_bdf(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                    theta_t, biovar_t, tlag);
  // full sig
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta, rel_tol, abs_tol, max_num_steps, as_rel_tol,
                      as_abs_tol, as_max_num_steps);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta, biovar, rel_tol, abs_tol, max_num_steps,
                      as_rel_tol, as_abs_tol, as_max_num_steps);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta, biovar, tlag, rel_tol, abs_tol, max_num_steps,
                      as_rel_tol, as_abs_tol, as_max_num_steps);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta, rel_tol, abs_tol, max_num_steps);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta, biovar, rel_tol, abs_tol, max_num_steps);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta, biovar, tlag, rel_tol, abs_tol, max_num_steps);
  // default ODE control
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta_t);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta_t, biovar_t);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta_t, biovar_t, tlag_t);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta_t, biovar);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta_t, biovar, tlag_t);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta, biovar_t);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta, biovar_t, tlag_t);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta_t, biovar_t);
  x = pmx_solve_adams(ode_rhs, 3, time, amt, rate, ii, evid, cmt, addl, ss,
                      theta_t, biovar_t, tlag);
  // DV
  cHat = x[2,  : ] ./ V1; // we're interested in the amount in the second compartment
}
model {
  // ignore
}

  $ ../../../../../install/default/bin/stanc --auto-format pmx_solve_onecpt.stan
data {
  int<lower=1> nt; // number of events
  int<lower=1> nObs; // number of observation
  array[nObs] int<lower=1> iObs; // index of observation
  // NONMEM data
  array[nt] int<lower=1> cmt;
  array[nt] int evid;
  array[nt] int addl;
  array[nt] int ss;
  array[nt] real amt;
  array[nt] real time;
  array[nt] real rate;
  array[nt] real ii;
}
parameters {
  real<lower=0> CL;
  real<lower=0> V1;
  real<lower=0> ka;
  real<lower=0> sigma;
}
transformed parameters {
  array[3] real theta; // ODE parameters
  row_vector<lower=0>[nt] cHat;
  matrix<lower=0>[2, nt] x;
  theta[1] = CL;
  theta[3] = V1;
  theta[5] = ka;
  x = pmx_solve_onecpt(time, amt, rate, ii, evid, cmt, addl, ss, theta);
  cHat = x[2,  : ] ./ V1; // we're interested in the amount in the second compartment
}
model {
  // omit
}

  $ ../../../../../install/default/bin/stanc --auto-format pmx_solve_onecpt_effcpt.stan
data {
  int<lower=1> nt; // number of events
  int<lower=1> nObs; // number of observation
  array[nObs] int<lower=1> iObs; // index of observation
  // NONMEM data
  array[nt] int<lower=1> cmt;
  array[nt] int evid;
  array[nt] int addl;
  array[nt] int ss;
  array[nt] real amt;
  array[nt] real time;
  array[nt] real rate;
  array[nt] real ii;
}
parameters {
  real<lower=0> CL;
  real<lower=0> V1;
  real<lower=0> ka;
  real<lower=0> ke;
  real<lower=0> sigma;
}
transformed parameters {
  array[3] real theta; // ODE parameters
  row_vector<lower=0>[nt] cHat;
  matrix<lower=0>[2, nt] x;
  theta[1] = CL;
  theta[2] = V1;
  theta[3] = ka;
  theta[4] = ke;
  x = pmx_solve_onecpt_effcpt(time, amt, rate, ii, evid, cmt, addl, ss,
                              theta);
  cHat = x[2,  : ] ./ V1; // we're interested in the amount in the second compartment
}
model {
  // omit
}

  $ ../../../../../install/default/bin/stanc --auto-format pmx_solve_twocpt.stan
data {
  int<lower=1> nt; // number of events
  int<lower=1> nObs; // number of observation
  array[nObs] int<lower=1> iObs; // index of observation
  // NONMEM data
  array[nt] int<lower=1> cmt;
  array[nt] int evid;
  array[nt] int addl;
  array[nt] int ss;
  array[nt] real amt;
  array[nt] real time;
  array[nt] real rate;
  array[nt] real ii;
}
parameters {
  real<lower=0> CL;
  real<lower=0> Q;
  real<lower=0> V1;
  real<lower=0> V2;
  real<lower=0> ka;
  real<lower=0> sigma;
}
transformed parameters {
  array[5] real theta; // ODE parameters
  row_vector<lower=0>[nt] cHat;
  matrix<lower=0>[3, nt] x;
  theta[1] = CL;
  theta[2] = Q;
  theta[3] = V1;
  theta[4] = V2;
  theta[5] = ka;
  x = pmx_solve_twocpt(time, amt, rate, ii, evid, cmt, addl, ss, theta);
  cHat = x[2,  : ] ./ V1; // we're interested in the amount in the second compartment
}
model {
  // omit
}

  $ ../../../../../install/default/bin/stanc --auto-format pmx_solve_twocpt_effcpt.stan
data {
  int<lower=1> nt; // number of events
  int<lower=1> nObs; // number of observation
  array[nObs] int<lower=1> iObs; // index of observation
  // NONMEM data
  array[nt] int<lower=1> cmt;
  array[nt] int evid;
  array[nt] int addl;
  array[nt] int ss;
  array[nt] real amt;
  array[nt] real time;
  array[nt] real rate;
  array[nt] real ii;
}
parameters {
  real<lower=0> CL;
  real<lower=0> Q;
  real<lower=0> V1;
  real<lower=0> V2;
  real<lower=0> ka;
  real<lower=0> ke;
  real<lower=0> sigma;
}
transformed parameters {
  array[6] real theta; // ODE parameters
  row_vector<lower=0>[nt] cHat;
  matrix<lower=0>[3, nt] x;
  theta[1] = CL;
  theta[2] = Q;
  theta[3] = V1;
  theta[4] = V2;
  theta[5] = ka;
  theta[6] = ke;
  x = pmx_solve_twocpt_effcpt(time, amt, rate, ii, evid, cmt, addl, ss,
                              theta);
  cHat = x[2,  : ] ./ V1; // we're interested in the amount in the second compartment
}
model {
  // omit
}

  $ ../../../../../install/default/bin/stanc --auto-format pmx_solve_twocpt_ode.stan
functions {
  vector FK_ODE(real t, vector y, vector y_pk, array[] real theta,
                array[] real rdummy, array[] int idummy) {
    /* PK variables */
    real VC = theta[3];
    
    /* PD variable */
    real mtt = theta[6];
    real circ0 = theta[7];
    real alpha = theta[8];
    real gamma = theta[9];
    real ktr = 4.0 / mtt;
    real prol = y[1] + circ0;
    real transit1 = y[2] + circ0;
    real transit2 = y[3] + circ0;
    real transit3 = y[4] + circ0;
    real circ = fmax(machine_precision(), y[5] + circ0);
    real conc = y_pk[2] / VC;
    real EDrug = alpha * conc;
    
    vector[5] dydt;
    
    dydt[1] = ktr * prol * ((1 - EDrug) * ((circ0 / circ) ^ gamma) - 1);
    dydt[2] = ktr * (prol - transit1);
    dydt[3] = ktr * (transit1 - transit2);
    dydt[4] = ktr * (transit2 - transit3);
    dydt[5] = ktr * (transit3 - circ);
    
    return dydt;
  }
}
data {
  int<lower=1> nt;
  int<lower=1> nObsPK;
  int<lower=1> nObsPD;
  array[nObsPK] int<lower=1> iObsPK;
  array[nObsPD] int<lower=1> iObsPD;
  array[nt] real<lower=0> amt;
  array[nt] int<lower=1> cmt;
  array[nt] int<lower=0> evid;
  array[nt] real<lower=0> time;
  array[nt] real<lower=0> ii;
  array[nt] int<lower=0> addl;
  array[nt] int<lower=0> ss;
  array[nt] real rate;
  vector<lower=0>[nObsPK] cObs;
  vector<lower=0>[nObsPD] neutObs;
  
  real<lower=0> circ0Prior;
  real<lower=0> circ0PriorCV;
  real<lower=0> mttPrior;
  real<lower=0> mttPriorCV;
  real<lower=0> gammaPrior;
  real<lower=0> gammaPriorCV;
  real<lower=0> alphaPrior;
  real<lower=0> alphaPriorCV;
}
transformed data {
  int nOde = 5;
  vector[nObsPK] logCObs;
  vector[nObsPD] logNeutObs;
  
  int nTheta = 9; // number of parameters
  int nIIV = 7; // parameters with IIV
  
  int n = 8; /* ODE dimension */
  real rtol = 1e-8;
  real atol = 1e-8;
  ;
  int max_step = 100000;
  
  logCObs = log(cObs);
  logNeutObs = log(neutObs);
}
parameters {
  real<lower=0> CL;
  real<lower=0> Q;
  real<lower=0> VC;
  real<lower=0> VP;
  real<lower=0> ka;
  real<lower=0> mtt;
  real<lower=0> circ0;
  real<lower=0> alpha;
  real<lower=0> gamma;
  real<lower=0> sigma;
  real<lower=0> sigmaNeut;
  
  // IIV parameters
  cholesky_factor_corr[nIIV] L;
  vector<lower=0>[nIIV] omega;
}
transformed parameters {
  row_vector[nt] cHat;
  vector<lower=0>[nObsPK] cHatObs;
  row_vector[nt] neutHat;
  vector<lower=0>[nObsPD] neutHatObs;
  array[nTheta] real<lower=0> theta;
  matrix[nOde + 3, nt] x2;
  matrix[nOde + 2, nt] x1;
  array[nTheta] real biovar = rep_array(1.0, nTheta);
  array[nTheta] real tlag = rep_array(0.0, nTheta);
  
  theta[1] = CL;
  theta[2] = Q;
  theta[3] = VC;
  theta[4] = VP;
  theta[5] = ka;
  theta[6] = mtt;
  theta[7] = circ0;
  theta[8] = alpha;
  theta[9] = gamma;
  
  x2 = pmx_solve_twocpt_rk45(FK_ODE, nOde, time, amt, rate, ii, evid, cmt,
                             addl, ss, theta, biovar, tlag, rtol, atol,
                             max_step);
  x2 = pmx_solve_twocpt_bdf(FK_ODE, nOde, time, amt, rate, ii, evid, cmt,
                            addl, ss, theta, biovar, tlag, rtol, atol,
                            max_step);
  x1 = pmx_solve_onecpt_rk45(FK_ODE, nOde, time, amt, rate, ii, evid, cmt,
                             addl, ss, theta, biovar, tlag, rtol, atol,
                             max_step);
  x1 = pmx_solve_onecpt_bdf(FK_ODE, nOde, time, amt, rate, ii, evid, cmt,
                            addl, ss, theta, biovar, tlag, rtol, atol,
                            max_step);
}
model {
  
}

