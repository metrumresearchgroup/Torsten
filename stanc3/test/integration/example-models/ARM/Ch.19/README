Data
====

1. election88.data.R
  - N            : number of observations
  - n_age        : number of age groups
  - n_age_edu    : number of age-edu groups
  - n_edu        : number of edu groups
  - n_region_full: number of regions
  - n_state      : number of states
  - black        : is black? 1: Yes, 0: No
  - age          : age category
  - age_edu      : age-edu value
  - edu          : education level
  - female       : is female? 1: Yes, 0: No
  - region_full  : region number
  - state        : state number
  - v_prev_full  : preview values
  - y            : vote outcome

2. pilots.data.R
  - N          : number of observations
  - n_airports : number of airports
  - n_groups   : number of groups
  - n_scenarios: number of scenarios
  - n_treatment: number of treatments
  - airport    : airport number
  - group_id   : group id
  - scenario_id: scenario id
  - treatment  : treatment number
  - y          : score

3. radon.data.R
  - J     : number of counties
  - N     : number of observations
  - county: county number
  - radon : radon measurement
  - u     : county-level uranium measure
  - x     : house-level first-floor indicator
  - y     : log of the home radon level

4. schools.data.R
  - N      : number of schools
  - sigma_y: standard error of effect estimates
  - y      : estimated treatment effects

Models
======

1. Multilevel model with varying intercept
  election88.stan: glmer(y ~ black + female + female:black + (1 | age) + (1 | edu)
			     + (1 | age_edu) + (1 | state), 
		         family=binomial(link="logit"))
  radon.stan: lmer(y ~ 1 + (1 | county))

2. Multilevel model with redundant parameterization
  radon_redundant.stan: lmer(y ~ 1 + (1 | county))

3. Multilevel model with parameter expansion
  election88_expansion.stan: glmer(y ~ black + female + female:black + (1 | age) 
				       + (1 | edu) + (1 | age_edu) + (1 | state), 
		                   family=binomial(link="logit"))
  pilots_expansion.stan    : lmer(y ~ 1 + (1 | treatment) + (1 | airport))
 
4. Multilevel model with several group level predictors
  pilots.stan               : lmer(y ~1 + (1 | treatment) + (1 | airport))

5. Above models with Matt trick
  pilots_chr.stan               : lmer(y~ 1 + (1 | group) + (1 | scenario))
  radon_redundant_chr.stan      : lmer(y ~ 1 + (1 | county))
  radon.stan_chr                : lmer(y ~ 1 + (1 | county))

6. Other
  item_response.stan: glmer(y ~ (g:a | k,j) - (g:b | k), family=binomial(link="logit"))
  schools.stan      : lmer(y ~ theta)
