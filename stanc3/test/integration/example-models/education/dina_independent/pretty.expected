  $ ../../../../../../install/default/bin/stanc --auto-format dina_independent.stan
data {
  int<lower=1> I;
  int<lower=1> J;
  int<lower=1> K;
  int<lower=1> C;
  matrix[J, I] y;
  matrix[C, K] alpha;
  matrix[I, C] xi;
}
parameters {
  row_vector<lower=0, upper=1>[K] eta;
  array[I] real<lower=0, upper=1> slip;
  array[I] real<lower=0, upper=1> guess;
}
transformed parameters {
  simplex[C] nu;
  vector[C] log_nu;
  for (c in 1 : C) {
    nu[c] = 1;
    for (k in 1 : K) {
      nu[c] = nu[c] * eta[k] ^ alpha[c, k] * (1 - eta[k]) ^ (1 - alpha[c, k]);
    }
  }
  log_nu = log(nu);
}
model {
  array[C] real ps;
  matrix[I, C] pi;
  array[I] real log_items;
  slip ~ beta(5, 25);
  guess ~ beta(5, 25);
  for (c in 1 : C) {
    for (i in 1 : I) {
      pi[i, c] = (1 - slip[i]) ^ xi[i, c] * guess[i] ^ (1 - xi[i, c]);
    }
  }
  for (j in 1 : J) {
    for (c in 1 : C) {
      for (i in 1 : I) {
        log_items[i] = y[j, i] * log(pi[i, c])
                       + (1 - y[j, i]) * log(1 - pi[i, c]);
      }
      ps[c] = log_nu[c] + sum(log_items);
    }
    target += log_sum_exp(ps);
  }
}
generated quantities {
  matrix[J, C] prob_resp_class;
  matrix[J, K] prob_resp_attr;
  matrix[I, C] pi;
  array[I] real log_items;
  row_vector[C] prob_joint;
  array[C] real prob_attr_class;
  for (c in 1 : C) {
    for (i in 1 : I) {
      pi[i, c] = (1 - slip[i]) ^ xi[i, c] * guess[i] ^ (1 - xi[i, c]);
    }
  }
  for (j in 1 : J) {
    for (c in 1 : C) {
      for (i in 1 : I) {
        log_items[i] = y[j, i] * log(pi[i, c])
                       + (1 - y[j, i]) * log(1 - pi[i, c]);
      }
      prob_joint[c] = nu[c] * exp(sum(log_items));
    }
    prob_resp_class[j] = prob_joint / sum(prob_joint);
  }
  for (j in 1 : J) {
    for (k in 1 : K) {
      for (c in 1 : C) {
        prob_attr_class[c] = prob_resp_class[j, c] * alpha[c, k];
      }
      prob_resp_attr[j, k] = sum(prob_attr_class);
    }
  }
}

  $ ../../../../../../install/default/bin/stanc --auto-format dina_nostructure.stan
data {
  int<lower=1> I;
  int<lower=1> J;
  int<lower=1> K;
  int<lower=1> C;
  matrix[J, I] y;
  matrix[C, K] alpha;
  matrix[I, C] xi;
}
parameters {
  simplex[C] nu;
  array[I] real<lower=0, upper=1> slip;
  array[I] real<lower=0, upper=1> guess;
}
transformed parameters {
  vector[C] log_nu = log(nu);
}
model {
  array[C] real ps;
  matrix[I, C] pi;
  array[I] real log_items;
  slip ~ beta(5, 25);
  guess ~ beta(5, 25);
  for (c in 1 : C) {
    for (i in 1 : I) {
      pi[i, c] = (1 - slip[i]) ^ xi[i, c] * guess[i] ^ (1 - xi[i, c]);
    }
  }
  for (j in 1 : J) {
    for (c in 1 : C) {
      for (i in 1 : I) {
        log_items[i] = y[j, i] * log(pi[i, c])
                       + (1 - y[j, i]) * log(1 - pi[i, c]);
      }
      ps[c] = log_nu[c] + sum(log_items);
    }
    target += log_sum_exp(ps);
  }
}
generated quantities {
  matrix[J, C] prob_resp_class;
  matrix[J, K] prob_resp_attr;
  matrix[I, C] pi;
  array[I] real log_items;
  row_vector[C] prob_joint;
  array[C] real prob_attr_class;
  for (c in 1 : C) {
    for (i in 1 : I) {
      pi[i, c] = (1 - slip[i]) ^ xi[i, c] * guess[i] ^ (1 - xi[i, c]);
    }
  }
  for (j in 1 : J) {
    for (c in 1 : C) {
      for (i in 1 : I) {
        log_items[i] = y[j, i] * log(pi[i, c])
                       + (1 - y[j, i]) * log(1 - pi[i, c]);
      }
      prob_joint[c] = nu[c] * exp(sum(log_items));
    }
    prob_resp_class[j] = prob_joint / sum(prob_joint);
  }
  for (j in 1 : J) {
    for (k in 1 : K) {
      for (c in 1 : C) {
        prob_attr_class[c] = prob_resp_class[j, c] * alpha[c, k];
      }
      prob_resp_attr[j, k] = sum(prob_attr_class);
    }
  }
}

