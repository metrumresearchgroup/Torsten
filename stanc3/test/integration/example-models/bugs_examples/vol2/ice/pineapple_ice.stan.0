# http://www.mrc-bsu.cam.ac.uk/bugs/winbugs/Vol2.pdf
# Page 29: Ice: non-parametric smoothing in an age-cohort model

data {
  int<lower=0> N; 
  int<lower=0> Nage;
  int<lower=0> None; 
  int<lower=0> K; 
  int year[N]; 
  int cases[N]; 
  int age[N]; 
  int pyr[N]; 
}
transformed data { # deterministic functions of data to be called only once
    int Nneighs[K];
    real betasd[K];

    Nneighs[1] <- 1;
    Nneighs[2] <- 5;
    betasd[2] <- 1.0 / sqrt(Nneighs[2]);
    for (k in 3:(K-2)) {
        Nneighs[k] <- 6;
    }
    Nneighs[K - 1] <- 5;
    Nneighs[K] <- 1;

    for(k in 1:K) {
      betasd[k] <- 1.0 / sqrt(Nneighs[k]);
    }
}
parameters {
  real alpha[Nage - 1]; 
  real beta[K];
  real<lower=0.05> sigma;
} 
transformed parameters { # deterministic functions of parameters called every iteration
    real betamean[K];

    betamean[1] <- 2.0 * beta[2] - beta[3];
    betamean[2] <- (2.0 * beta[1] + 4.0 * beta[3] - beta[4]) / 5.0;
    for (k in 3:(K-2)) {
        betamean[k] <- (4.0 * beta[k - 1] + 4.0 * beta[k + 1]- beta[k - 2] - beta[k + 2]) / 6.0;
    }
    betamean[K - 1] <- (2.0 * beta[K] + 4.0 * beta[K - 2] - beta[K - 3]) / 5.0;
    betamean[K] <- 2.0 * beta[K - 1] - beta[K - 2];
}
model {
    real ln_mu;
#   uncommenting these lines leads to an overflow in exp(ln_mu)
#    real globalmean;

#   alpha[1] is supposed to be constrained to zero 
#   so we shorten alpha by one and split the loop for the likelihood
    for(j in 1:(Nage-1)) {
        alpha[j] ~ normal(0.0, 1000.0);
    }
    sigma ~ gamma(1.00001, 1.0);

    for(k in 1:K) {
        beta[k] ~ normal(betamean[k], betasd[k]);
    }

#    globalmean <- sum(beta) / K;

    # likelihood among people where age == 1
    for(i in 1:None) {
        ln_mu <- log(pyr[i]) + sigma * beta[year[i]];
#        ln_mu <- log(pyr[i]) + sigma * (beta[year[i]] - globalmean);
        cases[i] ~ poisson(exp(ln_mu));
    }

    # likelihood among people where age > 1
    for(i in (None+1):N) {
        ln_mu <- log(pyr[i]) + alpha[age[i] - 1] + sigma * beta[year[i]];
#        ln_mu <- log(pyr[i]) + alpha[age[i] - 1] + sigma * (beta[year[i]] - globalmean);
        cases[i] ~ poisson(exp(ln_mu));
    }
}
generated quantities {
    real log_RR[K];
    for (k in 1 : K) {
        log_RR[k] <- sigma * (beta[k] - beta[5]);
    }
}
